

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Jan 31 12:49:55 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F690
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 1.45
    46                           ; Generated 16/11/2017 GMT
    47                           ; 
    48                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F690 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  000E                     	;# 
    93  000F                     	;# 
    94  0010                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0014                     	;# 
    99  0015                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001C                     	;# 
   107  001D                     	;# 
   108  001E                     	;# 
   109  001F                     	;# 
   110  0081                     	;# 
   111  0085                     	;# 
   112  0086                     	;# 
   113  0087                     	;# 
   114  008C                     	;# 
   115  008D                     	;# 
   116  008E                     	;# 
   117  008F                     	;# 
   118  0090                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0095                     	;# 
   125  0095                     	;# 
   126  0096                     	;# 
   127  0096                     	;# 
   128  0097                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  010C                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  010F                     	;# 
   140  0115                     	;# 
   141  0116                     	;# 
   142  0118                     	;# 
   143  0119                     	;# 
   144  011A                     	;# 
   145  011B                     	;# 
   146  011E                     	;# 
   147  011F                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  019D                     	;# 
   151  019E                     	;# 
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  000A                     	;# 
   161  000B                     	;# 
   162  000C                     	;# 
   163  000D                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0095                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009E                     	;# 
   207  009F                     	;# 
   208  010C                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  010F                     	;# 
   213  0115                     	;# 
   214  0116                     	;# 
   215  0118                     	;# 
   216  0119                     	;# 
   217  011A                     	;# 
   218  011B                     	;# 
   219  011E                     	;# 
   220  011F                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  019D                     	;# 
   224  019E                     	;# 
   225  0000                     	;# 
   226  0001                     	;# 
   227  0002                     	;# 
   228  0003                     	;# 
   229  0004                     	;# 
   230  0005                     	;# 
   231  0006                     	;# 
   232  0007                     	;# 
   233  000A                     	;# 
   234  000B                     	;# 
   235  000C                     	;# 
   236  000D                     	;# 
   237  000E                     	;# 
   238  000E                     	;# 
   239  000F                     	;# 
   240  0010                     	;# 
   241  0011                     	;# 
   242  0012                     	;# 
   243  0013                     	;# 
   244  0014                     	;# 
   245  0015                     	;# 
   246  0015                     	;# 
   247  0016                     	;# 
   248  0017                     	;# 
   249  0018                     	;# 
   250  0019                     	;# 
   251  001A                     	;# 
   252  001C                     	;# 
   253  001D                     	;# 
   254  001E                     	;# 
   255  001F                     	;# 
   256  0081                     	;# 
   257  0085                     	;# 
   258  0086                     	;# 
   259  0087                     	;# 
   260  008C                     	;# 
   261  008D                     	;# 
   262  008E                     	;# 
   263  008F                     	;# 
   264  0090                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0093                     	;# 
   268  0093                     	;# 
   269  0094                     	;# 
   270  0095                     	;# 
   271  0095                     	;# 
   272  0096                     	;# 
   273  0096                     	;# 
   274  0097                     	;# 
   275  0098                     	;# 
   276  0099                     	;# 
   277  009A                     	;# 
   278  009B                     	;# 
   279  009E                     	;# 
   280  009F                     	;# 
   281  010C                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  010F                     	;# 
   286  0115                     	;# 
   287  0116                     	;# 
   288  0118                     	;# 
   289  0119                     	;# 
   290  011A                     	;# 
   291  011B                     	;# 
   292  011E                     	;# 
   293  011F                     	;# 
   294  018C                     	;# 
   295  018D                     	;# 
   296  019D                     	;# 
   297  019E                     	;# 
   298  0000                     	;# 
   299  0001                     	;# 
   300  0002                     	;# 
   301  0003                     	;# 
   302  0004                     	;# 
   303  0005                     	;# 
   304  0006                     	;# 
   305  0007                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000D                     	;# 
   310  000E                     	;# 
   311  000E                     	;# 
   312  000F                     	;# 
   313  0010                     	;# 
   314  0011                     	;# 
   315  0012                     	;# 
   316  0013                     	;# 
   317  0014                     	;# 
   318  0015                     	;# 
   319  0015                     	;# 
   320  0016                     	;# 
   321  0017                     	;# 
   322  0018                     	;# 
   323  0019                     	;# 
   324  001A                     	;# 
   325  001C                     	;# 
   326  001D                     	;# 
   327  001E                     	;# 
   328  001F                     	;# 
   329  0081                     	;# 
   330  0085                     	;# 
   331  0086                     	;# 
   332  0087                     	;# 
   333  008C                     	;# 
   334  008D                     	;# 
   335  008E                     	;# 
   336  008F                     	;# 
   337  0090                     	;# 
   338  0092                     	;# 
   339  0093                     	;# 
   340  0093                     	;# 
   341  0093                     	;# 
   342  0094                     	;# 
   343  0095                     	;# 
   344  0095                     	;# 
   345  0096                     	;# 
   346  0096                     	;# 
   347  0097                     	;# 
   348  0098                     	;# 
   349  0099                     	;# 
   350  009A                     	;# 
   351  009B                     	;# 
   352  009E                     	;# 
   353  009F                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0115                     	;# 
   360  0116                     	;# 
   361  0118                     	;# 
   362  0119                     	;# 
   363  011A                     	;# 
   364  011B                     	;# 
   365  011E                     	;# 
   366  011F                     	;# 
   367  018C                     	;# 
   368  018D                     	;# 
   369  019D                     	;# 
   370  019E                     	;# 
   371  0000                     	;# 
   372  0001                     	;# 
   373  0002                     	;# 
   374  0003                     	;# 
   375  0004                     	;# 
   376  0005                     	;# 
   377  0006                     	;# 
   378  0007                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  000D                     	;# 
   383  000E                     	;# 
   384  000E                     	;# 
   385  000F                     	;# 
   386  0010                     	;# 
   387  0011                     	;# 
   388  0012                     	;# 
   389  0013                     	;# 
   390  0014                     	;# 
   391  0015                     	;# 
   392  0015                     	;# 
   393  0016                     	;# 
   394  0017                     	;# 
   395  0018                     	;# 
   396  0019                     	;# 
   397  001A                     	;# 
   398  001C                     	;# 
   399  001D                     	;# 
   400  001E                     	;# 
   401  001F                     	;# 
   402  0081                     	;# 
   403  0085                     	;# 
   404  0086                     	;# 
   405  0087                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  008F                     	;# 
   410  0090                     	;# 
   411  0092                     	;# 
   412  0093                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0094                     	;# 
   416  0095                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0098                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009E                     	;# 
   426  009F                     	;# 
   427  010C                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010E                     	;# 
   431  010F                     	;# 
   432  0115                     	;# 
   433  0116                     	;# 
   434  0118                     	;# 
   435  0119                     	;# 
   436  011A                     	;# 
   437  011B                     	;# 
   438  011E                     	;# 
   439  011F                     	;# 
   440  018C                     	;# 
   441  018D                     	;# 
   442  019D                     	;# 
   443  019E                     	;# 
   444                           
   445                           	psect	idataCOMMON
   446  006D                     __pidataCOMMON:	
   447                           
   448                           ;initializer for _key_count
   449  006D  3417               	retlw	23
   450  006E  3400               	retlw	0
   451                           
   452                           	psect	stringtext
   453  0100                     __pstringtext:	
   454  0100                     stringtab:	
   455  0100                     __stringtab:	
   456                           
   457                           ;	String table - string pointers are 2 bytes each
   458  0100  1BFF               	btfsc	btemp+1,7
   459  0101  290A               	ljmp	stringcode
   460  0102  1383               	bcf	3,7
   461  0103  187F               	btfsc	btemp+1,0
   462  0104  1783               	bsf	3,7
   463  0105  0800               	movf	0,w
   464  0106  0A84               	incf	4,f
   465  0107  1903               	skipnz
   466  0108  0AFF               	incf	btemp+1,f
   467  0109  0008               	return
   468  010A                     stringcode:	
   469  010A  087F               	movf	btemp+1,w
   470  010B  397F               	andlw	127
   471  010C  008A               	movwf	10
   472  010D  0804               	movf	4,w
   473  010E  0A84               	incf	4,f
   474  010F  1903               	skipnz
   475  0110  0AFF               	incf	btemp+1,f
   476  0111  0082               	movwf	2
   477  0112                     __stringbase:	
   478  0112                     __end_of__stringtab:	
   479  0112                     _dpowers:	
   480  0112  3401               	retlw	1
   481  0113  3400               	retlw	0
   482  0114  340A               	retlw	10
   483  0115  3400               	retlw	0
   484  0116  3464               	retlw	100
   485  0117  3400               	retlw	0
   486  0118  34E8               	retlw	232
   487  0119  3403               	retlw	3
   488  011A  3410               	retlw	16
   489  011B  3427               	retlw	39
   490  011C                     __end_of_dpowers:	
   491  0014                     _SSPCONbits	set	20
   492  0006                     _PORTBbits	set	6
   493  0005                     _PORTAbits	set	5
   494  0013                     _SSPBUF	set	19
   495  0007                     _PORTCbits	set	7
   496  0019                     _TXREG	set	25
   497  005F                     _GIE	set	95
   498  0018                     _CARRY	set	24
   499  00C4                     _CREN	set	196
   500  00C7                     _SPEN	set	199
   501  0064                     _TXIF	set	100
   502  0095                     _WPUAbits	set	149
   503  0085                     _TRISAbits	set	133
   504  0087                     _TRISCbits	set	135
   505  0099                     _SPBRG	set	153
   506  009B                     _BAUDCTLbits	set	155
   507  0086                     _TRISBbits	set	134
   508  0087                     _TRISC	set	135
   509  0086                     _TRISB	set	134
   510  0085                     _TRISA	set	133
   511  008F                     _OSCCON	set	143
   512  0094                     _SSPSTATbits	set	148
   513  040F                     _nRABPU	set	1039
   514  04C5                     _TXEN	set	1221
   515  04C4                     _SYNC	set	1220
   516  04C2                     _BRGH	set	1218
   517  010C                     _EEDATA	set	268
   518  010D                     _EEADR	set	269
   519  011F                     _ANSELH	set	287
   520  011E                     _ANSEL	set	286
   521  018D                     _EECON2	set	397
   522  018C                     _EECON1	set	396
   523  0C62                     _WREN	set	3170
   524  0C60                     _RD	set	3168
   525  0C61                     _WR	set	3169
   526  011C                     STR_11:	
   527  011C  3457               	retlw	87	;'W'
   528  011D  3465               	retlw	101	;'e'
   529  011E  3427               	retlw	39	;'''
   530  011F  346C               	retlw	108	;'l'
   531  0120  346C               	retlw	108	;'l'
   532  0121  3420               	retlw	32	;' '
   533  0122  3470               	retlw	112	;'p'
   534  0123  3475               	retlw	117	;'u'
   535  0124  3474               	retlw	116	;'t'
   536  0125  3420               	retlw	32	;' '
   537  0126  3479               	retlw	121	;'y'
   538  0127  346F               	retlw	111	;'o'
   539  0128  3475               	retlw	117	;'u'
   540  0129  3420               	retlw	32	;' '
   541  012A  3462               	retlw	98	;'b'
   542  012B  3461               	retlw	97	;'a'
   543  012C  3463               	retlw	99	;'c'
   544  012D  346B               	retlw	107	;'k'
   545  012E  3420               	retlw	32	;' '
   546  012F  3469               	retlw	105	;'i'
   547  0130  346E               	retlw	110	;'n'
   548  0131  3420               	retlw	32	;' '
   549  0132  3474               	retlw	116	;'t'
   550  0133  3475               	retlw	117	;'u'
   551  0134  346E               	retlw	110	;'n'
   552  0135  3469               	retlw	105	;'i'
   553  0136  346E               	retlw	110	;'n'
   554  0137  3467               	retlw	103	;'g'
   555  0138  3420               	retlw	32	;' '
   556  0139  346D               	retlw	109	;'m'
   557  013A  346F               	retlw	111	;'o'
   558  013B  3464               	retlw	100	;'d'
   559  013C  3465               	retlw	101	;'e'
   560  013D  3420               	retlw	32	;' '
   561  013E  3473               	retlw	115	;'s'
   562  013F  346F               	retlw	111	;'o'
   563  0140  3420               	retlw	32	;' '
   564  0141  3479               	retlw	121	;'y'
   565  0142  346F               	retlw	111	;'o'
   566  0143  3475               	retlw	117	;'u'
   567  0144  3420               	retlw	32	;' '
   568  0145  3463               	retlw	99	;'c'
   569  0146  3461               	retlw	97	;'a'
   570  0147  346E               	retlw	110	;'n'
   571  0148  3420               	retlw	32	;' '
   572  0149  3466               	retlw	102	;'f'
   573  014A  3469               	retlw	105	;'i'
   574  014B  3478               	retlw	120	;'x'
   575  014C  3420               	retlw	32	;' '
   576  014D  3469               	retlw	105	;'i'
   577  014E  3474               	retlw	116	;'t'
   578  014F  3420               	retlw	32	;' '
   579  0150  346E               	retlw	110	;'n'
   580  0151  346F               	retlw	111	;'o'
   581  0152  3477               	retlw	119	;'w'
   582  0153  342E               	retlw	46	;'.'
   583  0154  3420               	retlw	32	;' '
   584  0155  340A               	retlw	10
   585  0156  340D               	retlw	13
   586  0157  3400               	retlw	0
   587  0158                     STR_10:	
   588  0158  3454               	retlw	84	;'T'
   589  0159  3475               	retlw	117	;'u'
   590  015A  346E               	retlw	110	;'n'
   591  015B  3469               	retlw	105	;'i'
   592  015C  346E               	retlw	110	;'n'
   593  015D  3467               	retlw	103	;'g'
   594  015E  3420               	retlw	32	;' '
   595  015F  3472               	retlw	114	;'r'
   596  0160  3465               	retlw	101	;'e'
   597  0161  3473               	retlw	115	;'s'
   598  0162  3465               	retlw	101	;'e'
   599  0163  3474               	retlw	116	;'t'
   600  0164  3420               	retlw	32	;' '
   601  0165  3474               	retlw	116	;'t'
   602  0166  346F               	retlw	111	;'o'
   603  0167  3420               	retlw	32	;' '
   604  0168  3466               	retlw	102	;'f'
   605  0169  3461               	retlw	97	;'a'
   606  016A  3463               	retlw	99	;'c'
   607  016B  3474               	retlw	116	;'t'
   608  016C  346F               	retlw	111	;'o'
   609  016D  3472               	retlw	114	;'r'
   610  016E  3479               	retlw	121	;'y'
   611  016F  3420               	retlw	32	;' '
   612  0170  3464               	retlw	100	;'d'
   613  0171  3465               	retlw	101	;'e'
   614  0172  3466               	retlw	102	;'f'
   615  0173  3461               	retlw	97	;'a'
   616  0174  3475               	retlw	117	;'u'
   617  0175  346C               	retlw	108	;'l'
   618  0176  3474               	retlw	116	;'t'
   619  0177  3473               	retlw	115	;'s'
   620  0178  342E               	retlw	46	;'.'
   621  0179  3420               	retlw	32	;' '
   622  017A  3442               	retlw	66	;'B'
   623  017B  3465               	retlw	101	;'e'
   624  017C  3474               	retlw	116	;'t'
   625  017D  3474               	retlw	116	;'t'
   626  017E  3465               	retlw	101	;'e'
   627  017F  3472               	retlw	114	;'r'
   628  0180  3420               	retlw	32	;' '
   629  0181  3474               	retlw	116	;'t'
   630  0182  3475               	retlw	117	;'u'
   631  0183  346E               	retlw	110	;'n'
   632  0184  3465               	retlw	101	;'e'
   633  0185  3420               	retlw	32	;' '
   634  0186  3469               	retlw	105	;'i'
   635  0187  3474               	retlw	116	;'t'
   636  0188  3420               	retlw	32	;' '
   637  0189  3461               	retlw	97	;'a'
   638  018A  3467               	retlw	103	;'g'
   639  018B  3461               	retlw	97	;'a'
   640  018C  3469               	retlw	105	;'i'
   641  018D  346E               	retlw	110	;'n'
   642  018E  3421               	retlw	33	;'!'
   643  018F  340A               	retlw	10
   644  0190  340D               	retlw	13
   645  0191  3400               	retlw	0
   646  0192                     STR_9:	
   647  0192  3452               	retlw	82	;'R'
   648  0193  3465               	retlw	101	;'e'
   649  0194  3473               	retlw	115	;'s'
   650  0195  3465               	retlw	101	;'e'
   651  0196  3474               	retlw	116	;'t'
   652  0197  3474               	retlw	116	;'t'
   653  0198  3469               	retlw	105	;'i'
   654  0199  346E               	retlw	110	;'n'
   655  019A  3467               	retlw	103	;'g'
   656  019B  3420               	retlw	32	;' '
   657  019C  3474               	retlw	116	;'t'
   658  019D  3475               	retlw	117	;'u'
   659  019E  346E               	retlw	110	;'n'
   660  019F  3469               	retlw	105	;'i'
   661  01A0  346E               	retlw	110	;'n'
   662  01A1  3467               	retlw	103	;'g'
   663  01A2  3420               	retlw	32	;' '
   664  01A3  3474               	retlw	116	;'t'
   665  01A4  346F               	retlw	111	;'o'
   666  01A5  3420               	retlw	32	;' '
   667  01A6  3466               	retlw	102	;'f'
   668  01A7  3461               	retlw	97	;'a'
   669  01A8  3463               	retlw	99	;'c'
   670  01A9  3474               	retlw	116	;'t'
   671  01AA  346F               	retlw	111	;'o'
   672  01AB  3472               	retlw	114	;'r'
   673  01AC  3479               	retlw	121	;'y'
   674  01AD  3420               	retlw	32	;' '
   675  01AE  3464               	retlw	100	;'d'
   676  01AF  3465               	retlw	101	;'e'
   677  01B0  3466               	retlw	102	;'f'
   678  01B1  3461               	retlw	97	;'a'
   679  01B2  3475               	retlw	117	;'u'
   680  01B3  346C               	retlw	108	;'l'
   681  01B4  3474               	retlw	116	;'t'
   682  01B5  3473               	retlw	115	;'s'
   683  01B6  342E               	retlw	46	;'.'
   684  01B7  342E               	retlw	46	;'.'
   685  01B8  342E               	retlw	46	;'.'
   686  01B9  340A               	retlw	10
   687  01BA  340D               	retlw	13
   688  01BB  3400               	retlw	0
   689  01BC                     STR_12:	
   690  01BC  340A               	retlw	10
   691  01BD  340D               	retlw	13
   692  01BE  3452               	retlw	82	;'R'
   693  01BF  3465               	retlw	101	;'e'
   694  01C0  3464               	retlw	100	;'d'
   695  01C1  3420               	retlw	32	;' '
   696  01C2  344B               	retlw	75	;'K'
   697  01C3  3465               	retlw	101	;'e'
   698  01C4  3479               	retlw	121	;'y'
   699  01C5  3462               	retlw	98	;'b'
   700  01C6  346F               	retlw	111	;'o'
   701  01C7  3461               	retlw	97	;'a'
   702  01C8  3472               	retlw	114	;'r'
   703  01C9  3464               	retlw	100	;'d'
   704  01CA  3420               	retlw	32	;' '
   705  01CB  3462               	retlw	98	;'b'
   706  01CC  3479               	retlw	121	;'y'
   707  01CD  3420               	retlw	32	;' '
   708  01CE  344A               	retlw	74	;'J'
   709  01CF  3461               	retlw	97	;'a'
   710  01D0  346D               	retlw	109	;'m'
   711  01D1  3465               	retlw	101	;'e'
   712  01D2  3473               	retlw	115	;'s'
   713  01D3  3420               	retlw	32	;' '
   714  01D4  3448               	retlw	72	;'H'
   715  01D5  3461               	retlw	97	;'a'
   716  01D6  3467               	retlw	103	;'g'
   717  01D7  3465               	retlw	101	;'e'
   718  01D8  3472               	retlw	114	;'r'
   719  01D9  346D               	retlw	109	;'m'
   720  01DA  3461               	retlw	97	;'a'
   721  01DB  346E               	retlw	110	;'n'
   722  01DC  3420               	retlw	32	;' '
   723  01DD  3432               	retlw	50	;'2'
   724  01DE  3430               	retlw	48	;'0'
   725  01DF  3431               	retlw	49	;'1'
   726  01E0  3435               	retlw	53	;'5'
   727  01E1  340A               	retlw	10
   728  01E2  340D               	retlw	13
   729  01E3  3400               	retlw	0
   730  01E4                     STR_8:	
   731  01E4  3443               	retlw	67	;'C'
   732  01E5  3475               	retlw	117	;'u'
   733  01E6  3472               	retlw	114	;'r'
   734  01E7  3472               	retlw	114	;'r'
   735  01E8  3465               	retlw	101	;'e'
   736  01E9  346E               	retlw	110	;'n'
   737  01EA  3474               	retlw	116	;'t'
   738  01EB  3420               	retlw	32	;' '
   739  01EC  346B               	retlw	107	;'k'
   740  01ED  3465               	retlw	101	;'e'
   741  01EE  3479               	retlw	121	;'y'
   742  01EF  343A               	retlw	58	;':'
   743  01F0  3420               	retlw	32	;' '
   744  01F1  3425               	retlw	37	;'%'
   745  01F2  3469               	retlw	105	;'i'
   746  01F3  3409               	retlw	9
   747  01F4  3420               	retlw	32	;' '
   748  01F5  3443               	retlw	67	;'C'
   749  01F6  3475               	retlw	117	;'u'
   750  01F7  3472               	retlw	114	;'r'
   751  01F8  3472               	retlw	114	;'r'
   752  01F9  3465               	retlw	101	;'e'
   753  01FA  346E               	retlw	110	;'n'
   754  01FB  3474               	retlw	116	;'t'
   755  01FC  3420               	retlw	32	;' '
   756  01FD  3476               	retlw	118	;'v'
   757  01FE  3461               	retlw	97	;'a'
   758  01FF  346C               	retlw	108	;'l'
   759  0200  3475               	retlw	117	;'u'
   760  0201  3465               	retlw	101	;'e'
   761  0202  343A               	retlw	58	;':'
   762  0203  3420               	retlw	32	;' '
   763  0204  3425               	retlw	37	;'%'
   764  0205  3469               	retlw	105	;'i'
   765  0206  340A               	retlw	10
   766  0207  340D               	retlw	13
   767  0208  3400               	retlw	0
   768  0209                     STR_3:	
   769  0209  340A               	retlw	10
   770  020A  340D               	retlw	13
   771  020B  3445               	retlw	69	;'E'
   772  020C  346E               	retlw	110	;'n'
   773  020D  3474               	retlw	116	;'t'
   774  020E  3465               	retlw	101	;'e'
   775  020F  3472               	retlw	114	;'r'
   776  0210  3469               	retlw	105	;'i'
   777  0211  346E               	retlw	110	;'n'
   778  0212  3467               	retlw	103	;'g'
   779  0213  3420               	retlw	32	;' '
   780  0214  3474               	retlw	116	;'t'
   781  0215  3475               	retlw	117	;'u'
   782  0216  346E               	retlw	110	;'n'
   783  0217  3469               	retlw	105	;'i'
   784  0218  346E               	retlw	110	;'n'
   785  0219  3467               	retlw	103	;'g'
   786  021A  3420               	retlw	32	;' '
   787  021B  346D               	retlw	109	;'m'
   788  021C  346F               	retlw	111	;'o'
   789  021D  3464               	retlw	100	;'d'
   790  021E  3465               	retlw	101	;'e'
   791  021F  342E               	retlw	46	;'.'
   792  0220  342E               	retlw	46	;'.'
   793  0221  342E               	retlw	46	;'.'
   794  0222  340A               	retlw	10
   795  0223  340D               	retlw	13
   796  0224  3400               	retlw	0
   797  0225                     STR_4:	
   798  0225  344E               	retlw	78	;'N'
   799  0226  346F               	retlw	111	;'o'
   800  0227  3474               	retlw	116	;'t'
   801  0228  3465               	retlw	101	;'e'
   802  0229  343A               	retlw	58	;':'
   803  022A  3420               	retlw	32	;' '
   804  022B  3425               	retlw	37	;'%'
   805  022C  3469               	retlw	105	;'i'
   806  022D  3409               	retlw	9
   807  022E  3420               	retlw	32	;' '
   808  022F  3456               	retlw	86	;'V'
   809  0230  3461               	retlw	97	;'a'
   810  0231  346C               	retlw	108	;'l'
   811  0232  3475               	retlw	117	;'u'
   812  0233  3465               	retlw	101	;'e'
   813  0234  343A               	retlw	58	;':'
   814  0235  3420               	retlw	32	;' '
   815  0236  3425               	retlw	37	;'%'
   816  0237  3469               	retlw	105	;'i'
   817  0238  340A               	retlw	10
   818  0239  340D               	retlw	13
   819  023A  3400               	retlw	0
   820  023B                     STR_7:	
   821  023B  3443               	retlw	67	;'C'
   822  023C  3475               	retlw	117	;'u'
   823  023D  3472               	retlw	114	;'r'
   824  023E  3472               	retlw	114	;'r'
   825  023F  3465               	retlw	101	;'e'
   826  0240  346E               	retlw	110	;'n'
   827  0241  3474               	retlw	116	;'t'
   828  0242  3420               	retlw	32	;' '
   829  0243  346B               	retlw	107	;'k'
   830  0244  3465               	retlw	101	;'e'
   831  0245  3479               	retlw	121	;'y'
   832  0246  343A               	retlw	58	;':'
   833  0247  3420               	retlw	32	;' '
   834  0248  3425               	retlw	37	;'%'
   835  0249  3469               	retlw	105	;'i'
   836  024A  340A               	retlw	10
   837  024B  340D               	retlw	13
   838  024C  3400               	retlw	0
   839  024D                     STR_5:	
   840  024D  3457               	retlw	87	;'W'
   841  024E  3472               	retlw	114	;'r'
   842  024F  3469               	retlw	105	;'i'
   843  0250  3474               	retlw	116	;'t'
   844  0251  3469               	retlw	105	;'i'
   845  0252  346E               	retlw	110	;'n'
   846  0253  3467               	retlw	103	;'g'
   847  0254  3420               	retlw	32	;' '
   848  0255  3476               	retlw	118	;'v'
   849  0256  3461               	retlw	97	;'a'
   850  0257  346C               	retlw	108	;'l'
   851  0258  3475               	retlw	117	;'u'
   852  0259  3465               	retlw	101	;'e'
   853  025A  343A               	retlw	58	;':'
   854  025B  3420               	retlw	32	;' '
   855  025C  3425               	retlw	37	;'%'
   856  025D  3469               	retlw	105	;'i'
   857  025E  3400               	retlw	0
   858  025F                     STR_6:	
   859  025F  3444               	retlw	68	;'D'
   860  0260  346F               	retlw	111	;'o'
   861  0261  346E               	retlw	110	;'n'
   862  0262  3465               	retlw	101	;'e'
   863  0263  3421               	retlw	33	;'!'
   864  0264  340A               	retlw	10
   865  0265  340D               	retlw	13
   866  0266  3400               	retlw	0
   867  0267                     STR_1:	
   868  0267  342E               	retlw	46	;'.'
   869  0268  3400               	retlw	0
   870  0267                     
   871                           ; #config settings
   872  0000                     
   873                           	psect	cinit
   874  0013                     start_initialization:	
   875  0013                     __initialization:	
   876                           
   877                           ; Initialize objects allocated to COMMON
   878  0013  118A  206D  118A   	fcall	__pidataCOMMON	;fetch initializer
   879  0016  00F7               	movwf	__pdataCOMMON& (0+127)
   880  0017  118A  206E  118A   	fcall	__pidataCOMMON+1	;fetch initializer
   881  001A  00F8               	movwf	(__pdataCOMMON+1)& (0+127)
   882                           
   883                           ; Clear objects allocated to BANK1
   884  001B  1383               	bcf	3,7	;select IRP bank0
   885  001C  30A0               	movlw	low __pbssBANK1
   886  001D  0084               	movwf	4
   887  001E  30CE               	movlw	low (__pbssBANK1+46)
   888  001F  118A  2058  118A   	fcall	clear_ram0
   889                           
   890                           ; Clear objects allocated to BANK0
   891  0022  3053               	movlw	low __pbssBANK0
   892  0023  0084               	movwf	4
   893  0024  3059               	movlw	low (__pbssBANK0+6)
   894  0025  118A  2058         	fcall	clear_ram0
   895                           
   896                           ; Clear objects allocated to COMMON
   897  0027  01F9               	clrf	__pbssCOMMON& (0+127)
   898  0028                     end_of_initialization:	
   899                           ;End of C runtime variable initialization code
   900                           
   901  0028                     __end_of__initialization:	
   902  0028  0183               	clrf	3
   903  0029  118A  2E54         	ljmp	_main	;jump to C main() function
   904                           
   905                           	psect	bssCOMMON
   906  0079                     __pbssCOMMON:	
   907  0079                     _current_key:	
   908  0079                     	ds	1
   909                           
   910                           	psect	dataCOMMON
   911  0077                     __pdataCOMMON:	
   912  0077                     _key_count:	
   913  0077                     	ds	2
   914                           
   915                           	psect	bssBANK0
   916  0053                     __pbssBANK0:	
   917  0053                     _last_key:	
   918  0053                     	ds	2
   919  0055                     _pressed_keys:	
   920  0055                     	ds	2
   921  0057                     _currently_tuning:	
   922  0057                     	ds	1
   923  0058                     _in_tuning_mode:	
   924  0058                     	ds	1
   925                           
   926                           	psect	bssBANK1
   927  00A0                     __pbssBANK1:	
   928  00A0                     _tuning:	
   929  00A0                     	ds	46
   930                           
   931                           	psect	clrtext
   932  0058                     clear_ram0:	
   933                           ;	Called with FSR containing the base address, and
   934                           ;	W with the last address+1
   935                           
   936  0058  0064               	clrwdt	;clear the watchdog before getting into this loop
   937  0059                     clrloop0:	
   938  0059  0180               	clrf	0	;clear RAM location pointed to by FSR
   939  005A  0A84               	incf	4,f	;increment pointer
   940  005B  0604               	xorwf	4,w	;XOR with final address
   941  005C  1903               	btfsc	3,2	;have we reached the end yet?
   942  005D  3400               	retlw	0	;all done for this memory range, return
   943  005E  0604               	xorwf	4,w	;XOR again to restore value
   944  005F  2859               	goto	clrloop0	;do the next byte
   945                           
   946                           	psect	cstackCOMMON
   947  0070                     __pcstackCOMMON:	
   948  0070                     ?_eeprom_read:	
   949  0070                     ?_ConfigureOscillator:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0070                     ?_InitApp:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0070                     ?_isr:	
   956                           ; 1 bytes @ 0x0
   957                           
   958  0070                     ??_isr:	
   959                           ; 1 bytes @ 0x0
   960                           
   961  0070                     ?_putch:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0070                     ?_checkKey:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0070                     ?_tuningCheck:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0070                     ?_load_tuning:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0070                     ?_save_tuning:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ?_check_key_range:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0070                     ?_move_down:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0070                     ?_move_up:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0070                     ?_check_value_range:	
   986                           ; 1 bytes @ 0x0
   987                           
   988  0070                     ?_tune_down:	
   989                           ; 1 bytes @ 0x0
   990                           
   991  0070                     ?_tune_up:	
   992                           ; 1 bytes @ 0x0
   993                           
   994  0070                     ?_resetTuning:	
   995                           ; 1 bytes @ 0x0
   996                           
   997  0070                     ?_tune:	
   998                           ; 1 bytes @ 0x0
   999                           
  1000  0070                     ?_play:	
  1001                           ; 1 bytes @ 0x0
  1002                           
  1003  0070                     ?_main:	
  1004                           ; 1 bytes @ 0x0
  1005                           
  1006                           
  1007                           ; 1 bytes @ 0x0
  1008  0070                     	ds	4
  1009  0074                     ?_eeprom_write:	
  1010  0074                     ??_eeprom_read:	
  1011                           ; 1 bytes @ 0x4
  1012                           
  1013  0074                     ??_ConfigureOscillator:	
  1014                           ; 1 bytes @ 0x4
  1015                           
  1016  0074                     ??_InitApp:	
  1017                           ; 1 bytes @ 0x4
  1018                           
  1019  0074                     ??_putch:	
  1020                           ; 1 bytes @ 0x4
  1021                           
  1022  0074                     ?_SPI_Write:	
  1023                           ; 1 bytes @ 0x4
  1024                           
  1025  0074                     ??_checkKey:	
  1026                           ; 1 bytes @ 0x4
  1027                           
  1028  0074                     ??___wmul:	
  1029                           ; 1 bytes @ 0x4
  1030                           
  1031  0074                     putch@data:	
  1032                           ; 1 bytes @ 0x4
  1033                           
  1034  0074                     eeprom_write@value:	
  1035                           ; 1 bytes @ 0x4
  1036                           
  1037  0074                     SPI_Write@data:	
  1038                           ; 1 bytes @ 0x4
  1039                           
  1040  0074                     ___wmul@product:	
  1041                           ; 2 bytes @ 0x4
  1042                           
  1043                           
  1044                           ; 2 bytes @ 0x4
  1045  0074                     	ds	1
  1046  0075                     ??_eeprom_write:	
  1047  0075                     eeprom_read@addr:	
  1048                           ; 1 bytes @ 0x5
  1049                           
  1050                           
  1051                           ; 1 bytes @ 0x5
  1052  0075                     	ds	1
  1053  0076                     ??___lwdiv:	
  1054  0076                     checkKey@keyVal:	
  1055                           ; 1 bytes @ 0x6
  1056                           
  1057  0076                     eeprom_write@addr:	
  1058                           ; 1 bytes @ 0x6
  1059                           
  1060                           
  1061                           ; 1 bytes @ 0x6
  1062  0076                     	ds	1
  1063  0077                     ??_tuningCheck:	
  1064                           
  1065                           	psect	cstackBANK0
  1066  0020                     __pcstackBANK0:	
  1067                           ; 1 bytes @ 0x7
  1068                           
  1069  0020                     ??_SPI_Write:	
  1070  0020                     ?_read16_eeprom:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  0020                     ?___wmul:	
  1074                           ; 2 bytes @ 0x0
  1075                           
  1076  0020                     ?_get_voltage:	
  1077                           ; 2 bytes @ 0x0
  1078                           
  1079  0020                     ___wmul@multiplier:	
  1080                           ; 4 bytes @ 0x0
  1081                           
  1082  0020                     get_voltage@keyCode:	
  1083                           ; 2 bytes @ 0x0
  1084                           
  1085                           
  1086                           ; 4 bytes @ 0x0
  1087  0020                     	ds	2
  1088  0022                     ??_read16_eeprom:	
  1089  0022                     SPI_Write@config:	
  1090                           ; 1 bytes @ 0x2
  1091                           
  1092  0022                     ___wmul@multiplicand:	
  1093                           ; 2 bytes @ 0x2
  1094                           
  1095                           
  1096                           ; 2 bytes @ 0x2
  1097  0022                     	ds	2
  1098  0024                     ??_get_voltage:	
  1099  0024                     ?___lwdiv:	
  1100                           ; 1 bytes @ 0x4
  1101                           
  1102  0024                     ___lwdiv@divisor:	
  1103                           ; 2 bytes @ 0x4
  1104                           
  1105                           
  1106                           ; 2 bytes @ 0x4
  1107  0024                     	ds	2
  1108  0026                     read16_eeprom@toRet:	
  1109  0026                     ___lwdiv@dividend:	
  1110                           ; 2 bytes @ 0x6
  1111                           
  1112                           
  1113                           ; 2 bytes @ 0x6
  1114  0026                     	ds	2
  1115  0028                     read16_eeprom@lo_byte:	
  1116  0028                     ___lwdiv@counter:	
  1117                           ; 1 bytes @ 0x8
  1118                           
  1119                           
  1120                           ; 1 bytes @ 0x8
  1121  0028                     	ds	1
  1122  0029                     read16_eeprom@hi_byte:	
  1123  0029                     ___lwdiv@quotient:	
  1124                           ; 1 bytes @ 0x9
  1125                           
  1126                           
  1127                           ; 2 bytes @ 0x9
  1128  0029                     	ds	1
  1129  002A                     read16_eeprom@addr:	
  1130                           
  1131                           ; 1 bytes @ 0xA
  1132  002A                     	ds	1
  1133  002B                     ??_load_tuning:	
  1134  002B                     ??_play:	
  1135                           ; 1 bytes @ 0xB
  1136                           
  1137  002B                     ?___lwmod:	
  1138                           ; 1 bytes @ 0xB
  1139                           
  1140  002B                     ___lwmod@divisor:	
  1141                           ; 2 bytes @ 0xB
  1142                           
  1143                           
  1144                           ; 2 bytes @ 0xB
  1145  002B                     	ds	2
  1146  002D                     play@real_value:	
  1147  002D                     ___lwmod@dividend:	
  1148                           ; 2 bytes @ 0xD
  1149                           
  1150                           
  1151                           ; 2 bytes @ 0xD
  1152  002D                     	ds	2
  1153  002F                     ??___lwmod:	
  1154                           
  1155                           ; 1 bytes @ 0xF
  1156  002F                     	ds	1
  1157  0030                     ___lwmod@counter:	
  1158                           
  1159                           ; 1 bytes @ 0x10
  1160  0030                     	ds	1
  1161  0031                     ?_printf:	
  1162  0031                     printf@f:	
  1163                           ; 2 bytes @ 0x11
  1164                           
  1165                           
  1166                           ; 2 bytes @ 0x11
  1167  0031                     	ds	6
  1168  0037                     ??_printf:	
  1169                           
  1170                           ; 1 bytes @ 0x17
  1171  0037                     	ds	3
  1172  003A                     printf@ap:	
  1173                           
  1174                           ; 1 bytes @ 0x1A
  1175  003A                     	ds	1
  1176  003B                     printf@flag:	
  1177                           
  1178                           ; 1 bytes @ 0x1B
  1179  003B                     	ds	1
  1180  003C                     printf@prec:	
  1181                           
  1182                           ; 1 bytes @ 0x1C
  1183  003C                     	ds	1
  1184  003D                     printf@val:	
  1185                           
  1186                           ; 2 bytes @ 0x1D
  1187  003D                     	ds	2
  1188  003F                     printf@c:	
  1189                           
  1190                           ; 1 bytes @ 0x1F
  1191  003F                     	ds	1
  1192  0040                     ?_write16_eeprom:	
  1193  0040                     ??_check_key_range:	
  1194                           ; 1 bytes @ 0x20
  1195                           
  1196  0040                     ??_check_value_range:	
  1197                           ; 1 bytes @ 0x20
  1198                           
  1199  0040                     write16_eeprom@value:	
  1200                           ; 1 bytes @ 0x20
  1201                           
  1202                           
  1203                           ; 2 bytes @ 0x20
  1204  0040                     	ds	2
  1205  0042                     ??_write16_eeprom:	
  1206                           
  1207                           ; 1 bytes @ 0x22
  1208  0042                     	ds	1
  1209  0043                     write16_eeprom@lo_byte:	
  1210  0043                     check_value_range@value:	
  1211                           ; 1 bytes @ 0x23
  1212                           
  1213                           
  1214                           ; 2 bytes @ 0x23
  1215  0043                     	ds	1
  1216  0044                     ??_move_down:	
  1217  0044                     ??_move_up:	
  1218                           ; 1 bytes @ 0x24
  1219                           
  1220  0044                     write16_eeprom@hi_byte:	
  1221                           ; 1 bytes @ 0x24
  1222                           
  1223                           
  1224                           ; 1 bytes @ 0x24
  1225  0044                     	ds	1
  1226  0045                     write16_eeprom@addr:	
  1227  0045                     check_value_range@key:	
  1228                           ; 1 bytes @ 0x25
  1229                           
  1230                           
  1231                           ; 1 bytes @ 0x25
  1232  0045                     	ds	1
  1233  0046                     ??_save_tuning:	
  1234  0046                     ??_tune_down:	
  1235                           ; 1 bytes @ 0x26
  1236                           
  1237  0046                     ??_tune_up:	
  1238                           ; 1 bytes @ 0x26
  1239                           
  1240                           
  1241                           ; 1 bytes @ 0x26
  1242  0046                     	ds	2
  1243  0048                     save_tuning@value:	
  1244                           
  1245                           ; 2 bytes @ 0x28
  1246  0048                     	ds	1
  1247  0049                     tune_down@value:	
  1248  0049                     tune_up@value:	
  1249                           ; 2 bytes @ 0x29
  1250                           
  1251                           
  1252                           ; 2 bytes @ 0x29
  1253  0049                     	ds	1
  1254  004A                     ??_resetTuning:	
  1255                           
  1256                           ; 1 bytes @ 0x2A
  1257  004A                     	ds	1
  1258  004B                     tune_down@key:	
  1259  004B                     tune_up@key:	
  1260                           ; 1 bytes @ 0x2B
  1261                           
  1262                           
  1263                           ; 1 bytes @ 0x2B
  1264  004B                     	ds	2
  1265  004D                     ??_tune:	
  1266                           
  1267                           ; 1 bytes @ 0x2D
  1268  004D                     	ds	3
  1269  0050                     ??_main:	
  1270                           
  1271                           ; 1 bytes @ 0x30
  1272  0050                     	ds	3
  1273                           
  1274                           	psect	maintext
  1275  0654                     __pmaintext:	
  1276 ;;
  1277 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1278 ;;
  1279 ;; *************** function _main *****************
  1280 ;; Defined at:
  1281 ;;		line 305 in file "main.c"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;		None
  1284 ;; Auto vars:     Size  Location     Type
  1285 ;;		None
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  1    wreg      void 
  1288 ;; Registers used:
  1289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1290 ;; Tracked objects:
  1291 ;;		On entry : B00/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1295 ;;      Params:         0       0       0       0
  1296 ;;      Locals:         0       0       0       0
  1297 ;;      Temps:          0       3       0       0
  1298 ;;      Totals:         0       3       0       0
  1299 ;;Total ram usage:        3 bytes
  1300 ;; Hardware stack levels required when called:    7
  1301 ;; This function calls:
  1302 ;;		_ConfigureOscillator
  1303 ;;		_InitApp
  1304 ;;		_load_tuning
  1305 ;;		_play
  1306 ;;		_printf
  1307 ;;		_tune
  1308 ;;		_tuningCheck
  1309 ;; This function is called by:
  1310 ;;		Startup code after reset
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           
  1315                           ;psect for function _main
  1316  0654                     _main:	
  1317                           
  1318                           ;main.c: 308: ConfigureOscillator();
  1319                           
  1320                           ;incstack = 0
  1321                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1322  0654  118A  2068  118A   	fcall	_ConfigureOscillator
  1323                           
  1324                           ;main.c: 311: InitApp();
  1325  0657  118A  25A7  118A   	fcall	_InitApp
  1326                           
  1327                           ;main.c: 313: printf("\n\rRed Keyboard by James Hagerman 2015\n\r");
  1328  065A  30BC               	movlw	low (STR_12| (0+32768))
  1329  065B  1283               	bcf	3,5	;RP0=0, select bank0
  1330  065C  1303               	bcf	3,6	;RP1=0, select bank0
  1331  065D  00B1               	movwf	printf@f
  1332  065E  3081               	movlw	high (STR_12| (0+32768))
  1333  065F  00B2               	movwf	printf@f+1
  1334  0660  118A  2269  118A   	fcall	_printf
  1335                           
  1336                           ;main.c: 316: load_tuning();
  1337  0663  118A  2706  118A   	fcall	_load_tuning
  1338                           
  1339                           ;main.c: 323: tuningCheck();
  1340  0666  118A  202B  118A   	fcall	_tuningCheck
  1341  0669                     l1962:	
  1342                           ;main.c: 324: while(in_tuning_mode) {
  1343                           
  1344  0669  1283               	bcf	3,5	;RP0=0, select bank0
  1345  066A  1303               	bcf	3,6	;RP1=0, select bank0
  1346  066B  0858               	movf	_in_tuning_mode,w
  1347  066C  1903               	btfsc	3,2
  1348  066D  2E72               	goto	l1964
  1349                           
  1350                           ;main.c: 325: tune();
  1351  066E  118A  23C7  118A   	fcall	_tune
  1352  0671  2E69               	goto	l1962
  1353  0672                     l1964:	
  1354                           
  1355                           ;main.c: 326: }
  1356                           ;main.c: 328: _delay((unsigned long)((1000)*(8000000L/4000.0)));
  1357  0672  300B               	movlw	11
  1358  0673  1283               	bcf	3,5	;RP0=0, select bank0
  1359  0674  1303               	bcf	3,6	;RP1=0, select bank0
  1360  0675  00D2               	movwf	??_main+2
  1361  0676  3026               	movlw	38
  1362  0677  00D1               	movwf	??_main+1
  1363  0678  305D               	movlw	93
  1364  0679  00D0               	movwf	??_main
  1365  067A                     u1757:	
  1366  067A  0BD0               	decfsz	??_main,f
  1367  067B  2E7A               	goto	u1757
  1368  067C  0BD1               	decfsz	??_main+1,f
  1369  067D  2E7A               	goto	u1757
  1370  067E  0BD2               	decfsz	??_main+2,f
  1371  067F  2E7A               	goto	u1757
  1372  0680  0000               	nop
  1373  0681                     l1966:	
  1374                           ;main.c: 329: while(1)
  1375                           
  1376                           
  1377                           ;main.c: 330: {
  1378                           ;main.c: 331: play();
  1379  0681  118A  2492  118A   	fcall	_play
  1380  0684  2E81               	goto	l1966
  1381  0685                     __end_of_main:	
  1382                           
  1383                           	psect	text1
  1384  002B                     __ptext1:	
  1385 ;; *************** function _tuningCheck *****************
  1386 ;; Defined at:
  1387 ;;		line 163 in file "main.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;		None
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;		None
  1392 ;; Return value:  Size  Location     Type
  1393 ;;                  1    wreg      void 
  1394 ;; Registers used:
  1395 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1401 ;;      Params:         0       0       0       0
  1402 ;;      Locals:         0       0       0       0
  1403 ;;      Temps:          0       0       0       0
  1404 ;;      Totals:         0       0       0       0
  1405 ;;Total ram usage:        0 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; Hardware stack levels required when called:    3
  1408 ;; This function calls:
  1409 ;;		_checkKey
  1410 ;;		_printf
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           
  1417                           ;psect for function _tuningCheck
  1418  002B                     _tuningCheck:	
  1419                           
  1420                           ;main.c: 167: if (checkKey(21) && checkKey(22)) {
  1421                           
  1422                           ;incstack = 0
  1423                           ; Regs used in _tuningCheck: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1424  002B  3015               	movlw	21
  1425  002C  118A  2331  118A   	fcall	_checkKey
  1426  002F  3A00               	xorlw	0
  1427  0030  1903               	skipnz
  1428  0031  0008               	return
  1429  0032  3016               	movlw	22
  1430  0033  118A  2331  118A   	fcall	_checkKey
  1431  0036  3A00               	xorlw	0
  1432  0037  1903               	skipnz
  1433  0038  0008               	return
  1434                           
  1435                           ;main.c: 168: in_tuning_mode = 1;
  1436  0039  1283               	bcf	3,5	;RP0=0, select bank0
  1437  003A  1303               	bcf	3,6	;RP1=0, select bank0
  1438  003B  01D8               	clrf	_in_tuning_mode
  1439  003C  0AD8               	incf	_in_tuning_mode,f
  1440                           
  1441                           ;main.c: 169: printf("\n\rEntering tuning mode...\n\r");
  1442  003D  3009               	movlw	low (STR_3| (0+32768))
  1443  003E  00B1               	movwf	printf@f
  1444  003F  3082               	movlw	high (STR_3| (0+32768))
  1445  0040  00B2               	movwf	printf@f+1
  1446  0041  118A  2269         	fcall	_printf
  1447  0043  0008               	return
  1448  0044                     __end_of_tuningCheck:	
  1449                           
  1450                           	psect	text2
  1451  03C7                     __ptext2:	
  1452 ;; *************** function _tune *****************
  1453 ;; Defined at:
  1454 ;;		line 240 in file "main.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;		None
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;		None
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  1    wreg      void 
  1461 ;; Registers used:
  1462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1468 ;;      Params:         0       0       0       0
  1469 ;;      Locals:         0       0       0       0
  1470 ;;      Temps:          0       3       0       0
  1471 ;;      Totals:         0       3       0       0
  1472 ;;Total ram usage:        3 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    6
  1475 ;; This function calls:
  1476 ;;		_SPI_Write
  1477 ;;		_checkKey
  1478 ;;		_move_down
  1479 ;;		_move_up
  1480 ;;		_resetTuning
  1481 ;;		_save_tuning
  1482 ;;		_tune_down
  1483 ;;		_tune_up
  1484 ;; This function is called by:
  1485 ;;		_main
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           
  1490                           ;psect for function _tune
  1491  03C7                     _tune:	
  1492                           
  1493                           ;main.c: 242: _delay((unsigned long)((100)*(8000000L/4000.0)));
  1494                           
  1495                           ;incstack = 0
  1496                           ; Regs used in _tune: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1497  03C7  3002               	movlw	2
  1498  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  1499  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  1500  03CA  00CF               	movwf	??_tune+2
  1501  03CB  3004               	movlw	4
  1502  03CC  00CE               	movwf	??_tune+1
  1503  03CD  30BA               	movlw	186
  1504  03CE  00CD               	movwf	??_tune
  1505  03CF                     u1767:	
  1506  03CF  0BCD               	decfsz	??_tune,f
  1507  03D0  2BCF               	goto	u1767
  1508  03D1  0BCE               	decfsz	??_tune+1,f
  1509  03D2  2BCF               	goto	u1767
  1510  03D3  0BCF               	decfsz	??_tune+2,f
  1511  03D4  2BCF               	goto	u1767
  1512                           
  1513                           ;main.c: 245: for (current_key = 0; current_key < key_count; current_key += 1) {
  1514  03D5  01F9               	clrf	_current_key
  1515  03D6  2C06               	goto	l1918
  1516  03D7                     l1896:	
  1517                           ;main.c: 251: break;
  1518                           
  1519                           
  1520                           ;main.c: 252: }
  1521                           ;main.c: 255: if (current_key == 19) {
  1522  03D7  3013               	movlw	19
  1523  03D8  0679               	xorwf	_current_key,w
  1524  03D9  1D03               	btfss	3,2
  1525  03DA  2BDE               	goto	l1900
  1526                           
  1527                           ;main.c: 256: move_up();
  1528  03DB  118A  27F6  118A   	fcall	_move_up
  1529  03DE                     l1900:	
  1530                           
  1531                           ;main.c: 257: }
  1532                           ;main.c: 258: if (current_key == 17) {
  1533  03DE  3011               	movlw	17
  1534  03DF  0679               	xorwf	_current_key,w
  1535  03E0  1D03               	btfss	3,2
  1536  03E1  2BE5               	goto	l1904
  1537                           
  1538                           ;main.c: 259: move_down();
  1539  03E2  118A  204F  118A   	fcall	_move_down
  1540  03E5                     l1904:	
  1541                           
  1542                           ;main.c: 260: }
  1543                           ;main.c: 263: if (current_key == 18) {
  1544  03E5  3012               	movlw	18
  1545  03E6  0679               	xorwf	_current_key,w
  1546  03E7  1D03               	btfss	3,2
  1547  03E8  2BEF               	goto	l1908
  1548                           
  1549                           ;main.c: 264: tune_down(currently_tuning);
  1550  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  1551  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  1552  03EB  0857               	movf	_currently_tuning,w
  1553  03EC  118A  2778  118A   	fcall	_tune_down
  1554  03EF                     l1908:	
  1555                           
  1556                           ;main.c: 265: }
  1557                           ;main.c: 266: if (current_key == 20) {
  1558  03EF  3014               	movlw	20
  1559  03F0  0679               	xorwf	_current_key,w
  1560  03F1  1D03               	btfss	3,2
  1561  03F2  2BF9               	goto	l1912
  1562                           
  1563                           ;main.c: 267: tune_up(currently_tuning);
  1564  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  1565  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  1566  03F5  0857               	movf	_currently_tuning,w
  1567  03F6  118A  2754  118A   	fcall	_tune_up
  1568  03F9                     l1912:	
  1569                           
  1570                           ;main.c: 268: }
  1571                           ;main.c: 270: if (current_key == 5) {
  1572  03F9  3005               	movlw	5
  1573  03FA  0679               	xorwf	_current_key,w
  1574  03FB  1D03               	btfss	3,2
  1575  03FC  2C00               	goto	l1916
  1576                           
  1577                           ;main.c: 271: resetTuning();
  1578  03FD  118A  2433  118A   	fcall	_resetTuning
  1579  0400                     l1916:	
  1580  0400  3001               	movlw	1
  1581  0401  1283               	bcf	3,5	;RP0=0, select bank0
  1582  0402  1303               	bcf	3,6	;RP1=0, select bank0
  1583  0403  00CD               	movwf	??_tune
  1584  0404  084D               	movf	??_tune,w
  1585  0405  07F9               	addwf	_current_key,f
  1586  0406                     l1918:	
  1587  0406  0879               	movf	_current_key,w
  1588  0407  1283               	bcf	3,5	;RP0=0, select bank0
  1589  0408  1303               	bcf	3,6	;RP1=0, select bank0
  1590  0409  00CD               	movwf	??_tune
  1591  040A  01CE               	clrf	??_tune+1
  1592  040B  0878               	movf	_key_count+1,w
  1593  040C  024E               	subwf	??_tune+1,w
  1594  040D  1D03               	skipz
  1595  040E  2C11               	goto	u1695
  1596  040F  0877               	movf	_key_count,w
  1597  0410  024D               	subwf	??_tune,w
  1598  0411                     u1695:	
  1599  0411  1803               	btfsc	3,0
  1600  0412  2C23               	goto	l1920
  1601                           
  1602                           ;main.c: 246: if (checkKey(current_key)) {
  1603  0413  0879               	movf	_current_key,w
  1604  0414  118A  2331  118A   	fcall	_checkKey
  1605  0417  3A00               	xorlw	0
  1606  0418  1903               	skipnz
  1607  0419  2C00               	goto	l1916
  1608                           
  1609                           ;main.c: 248: if (current_key == 0) {
  1610  041A  0879               	movf	_current_key,w
  1611  041B  1D03               	btfss	3,2
  1612  041C  2BD7               	goto	l1896
  1613                           
  1614                           ;main.c: 249: in_tuning_mode = 0;
  1615  041D  1283               	bcf	3,5	;RP0=0, select bank0
  1616  041E  1303               	bcf	3,6	;RP1=0, select bank0
  1617  041F  01D8               	clrf	_in_tuning_mode
  1618                           
  1619                           ;main.c: 250: save_tuning();
  1620  0420  118A  2527  118A   	fcall	_save_tuning
  1621  0423                     l1920:	
  1622                           
  1623                           ;main.c: 272: }
  1624                           ;main.c: 274: }
  1625                           ;main.c: 275: }
  1626                           ;main.c: 276: SPI_Write(tuning[currently_tuning]);
  1627  0423  1283               	bcf	3,5	;RP0=0, select bank0
  1628  0424  1303               	bcf	3,6	;RP1=0, select bank0
  1629  0425  0857               	movf	_currently_tuning,w
  1630  0426  00CD               	movwf	??_tune
  1631  0427  074D               	addwf	??_tune,w
  1632  0428  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1633  0429  0084               	movwf	4
  1634  042A  1383               	bcf	3,7	;select IRP bank1
  1635  042B  0800               	movf	0,w
  1636  042C  00F4               	movwf	SPI_Write@data
  1637  042D  0A84               	incf	4,f
  1638  042E  0800               	movf	0,w
  1639  042F  00F5               	movwf	SPI_Write@data+1
  1640  0430  118A  26B1         	fcall	_SPI_Write
  1641  0432  0008               	return
  1642  0433                     __end_of_tune:	
  1643                           
  1644                           	psect	text3
  1645  0754                     __ptext3:	
  1646 ;; *************** function _tune_up *****************
  1647 ;; Defined at:
  1648 ;;		line 224 in file "main.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  key             1    wreg     unsigned char 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  key             1   43[BANK0 ] unsigned char 
  1653 ;;  value           2   41[BANK0 ] unsigned int 
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      void 
  1656 ;; Registers used:
  1657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1663 ;;      Params:         0       0       0       0
  1664 ;;      Locals:         0       3       0       0
  1665 ;;      Temps:          0       3       0       0
  1666 ;;      Totals:         0       6       0       0
  1667 ;;Total ram usage:        6 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    4
  1670 ;; This function calls:
  1671 ;;		_check_value_range
  1672 ;; This function is called by:
  1673 ;;		_tune
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           
  1678                           ;psect for function _tune_up
  1679  0754                     _tune_up:	
  1680                           
  1681                           ;incstack = 0
  1682                           ; Regs used in _tune_up: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1683                           ;tune_up@key stored from wreg
  1684  0754  1283               	bcf	3,5	;RP0=0, select bank0
  1685  0755  1303               	bcf	3,6	;RP1=0, select bank0
  1686  0756  00CB               	movwf	tune_up@key
  1687                           
  1688                           ;main.c: 225: uint16_t value = tuning[key];
  1689  0757  084B               	movf	tune_up@key,w
  1690  0758  00C6               	movwf	??_tune_up
  1691  0759  0746               	addwf	??_tune_up,w
  1692  075A  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1693  075B  0084               	movwf	4
  1694  075C  1383               	bcf	3,7	;select IRP bank1
  1695  075D  0800               	movf	0,w
  1696  075E  00C9               	movwf	tune_up@value
  1697  075F  0A84               	incf	4,f
  1698  0760  0800               	movf	0,w
  1699  0761  00CA               	movwf	tune_up@value+1
  1700                           
  1701                           ;main.c: 226: tuning[key] = value + 1;
  1702  0762  0849               	movf	tune_up@value,w
  1703  0763  3E01               	addlw	1
  1704  0764  00C6               	movwf	??_tune_up
  1705  0765  084A               	movf	tune_up@value+1,w
  1706  0766  1803               	skipnc
  1707  0767  3E01               	addlw	1
  1708  0768  3E00               	addlw	0
  1709  0769  00C7               	movwf	??_tune_up+1
  1710  076A  084B               	movf	tune_up@key,w
  1711  076B  00C8               	movwf	??_tune_up+2
  1712  076C  0748               	addwf	??_tune_up+2,w
  1713  076D  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1714  076E  0084               	movwf	4
  1715  076F  0846               	movf	??_tune_up,w
  1716  0770  0080               	movwf	0
  1717  0771  0A84               	incf	4,f
  1718  0772  0847               	movf	??_tune_up+1,w
  1719  0773  0080               	movwf	0
  1720                           
  1721                           ;main.c: 227: check_value_range(key);
  1722  0774  084B               	movf	tune_up@key,w
  1723  0775  118A  24E0         	fcall	_check_value_range
  1724  0777  0008               	return
  1725  0778                     __end_of_tune_up:	
  1726                           
  1727                           	psect	text4
  1728  0778                     __ptext4:	
  1729 ;; *************** function _tune_down *****************
  1730 ;; Defined at:
  1731 ;;		line 219 in file "main.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;  key             1    wreg     unsigned char 
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;  key             1   43[BANK0 ] unsigned char 
  1736 ;;  value           2   41[BANK0 ] unsigned int 
  1737 ;; Return value:  Size  Location     Type
  1738 ;;                  1    wreg      void 
  1739 ;; Registers used:
  1740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1746 ;;      Params:         0       0       0       0
  1747 ;;      Locals:         0       3       0       0
  1748 ;;      Temps:          0       3       0       0
  1749 ;;      Totals:         0       6       0       0
  1750 ;;Total ram usage:        6 bytes
  1751 ;; Hardware stack levels used:    1
  1752 ;; Hardware stack levels required when called:    4
  1753 ;; This function calls:
  1754 ;;		_check_value_range
  1755 ;; This function is called by:
  1756 ;;		_tune
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           
  1761                           ;psect for function _tune_down
  1762  0778                     _tune_down:	
  1763                           
  1764                           ;incstack = 0
  1765                           ; Regs used in _tune_down: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1766                           ;tune_down@key stored from wreg
  1767  0778  1283               	bcf	3,5	;RP0=0, select bank0
  1768  0779  1303               	bcf	3,6	;RP1=0, select bank0
  1769  077A  00CB               	movwf	tune_down@key
  1770                           
  1771                           ;main.c: 220: uint16_t value = tuning[key];
  1772  077B  084B               	movf	tune_down@key,w
  1773  077C  00C6               	movwf	??_tune_down
  1774  077D  0746               	addwf	??_tune_down,w
  1775  077E  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1776  077F  0084               	movwf	4
  1777  0780  1383               	bcf	3,7	;select IRP bank1
  1778  0781  0800               	movf	0,w
  1779  0782  00C9               	movwf	tune_down@value
  1780  0783  0A84               	incf	4,f
  1781  0784  0800               	movf	0,w
  1782  0785  00CA               	movwf	tune_down@value+1
  1783                           
  1784                           ;main.c: 221: tuning[key] = value - 1;
  1785  0786  0849               	movf	tune_down@value,w
  1786  0787  3EFF               	addlw	255
  1787  0788  00C6               	movwf	??_tune_down
  1788  0789  084A               	movf	tune_down@value+1,w
  1789  078A  1803               	skipnc
  1790  078B  3E01               	addlw	1
  1791  078C  3EFF               	addlw	255
  1792  078D  00C7               	movwf	??_tune_down+1
  1793  078E  084B               	movf	tune_down@key,w
  1794  078F  00C8               	movwf	??_tune_down+2
  1795  0790  0748               	addwf	??_tune_down+2,w
  1796  0791  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1797  0792  0084               	movwf	4
  1798  0793  0846               	movf	??_tune_down,w
  1799  0794  0080               	movwf	0
  1800  0795  0A84               	incf	4,f
  1801  0796  0847               	movf	??_tune_down+1,w
  1802  0797  0080               	movwf	0
  1803                           
  1804                           ;main.c: 222: check_value_range(key);
  1805  0798  084B               	movf	tune_down@key,w
  1806  0799  118A  24E0         	fcall	_check_value_range
  1807  079B  0008               	return
  1808  079C                     __end_of_tune_down:	
  1809                           
  1810                           	psect	text5
  1811  04E0                     __ptext5:	
  1812 ;; *************** function _check_value_range *****************
  1813 ;; Defined at:
  1814 ;;		line 209 in file "main.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;  key             1    wreg     unsigned char 
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;  key             1   37[BANK0 ] unsigned char 
  1819 ;;  value           2   35[BANK0 ] unsigned int 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  1    wreg      void 
  1822 ;; Registers used:
  1823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1829 ;;      Params:         0       0       0       0
  1830 ;;      Locals:         0       3       0       0
  1831 ;;      Temps:          0       3       0       0
  1832 ;;      Totals:         0       6       0       0
  1833 ;;Total ram usage:        6 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; Hardware stack levels required when called:    3
  1836 ;; This function calls:
  1837 ;;		_printf
  1838 ;; This function is called by:
  1839 ;;		_tune_down
  1840 ;;		_tune_up
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           
  1845                           ;psect for function _check_value_range
  1846  04E0                     _check_value_range:	
  1847                           
  1848                           ;incstack = 0
  1849                           ; Regs used in _check_value_range: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1850                           ;check_value_range@key stored from wreg
  1851  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  1852  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  1853  04E2  00C5               	movwf	check_value_range@key
  1854                           
  1855                           ;main.c: 210: uint16_t value = tuning[key];
  1856  04E3  0845               	movf	check_value_range@key,w
  1857  04E4  00C0               	movwf	??_check_value_range
  1858  04E5  0740               	addwf	??_check_value_range,w
  1859  04E6  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1860  04E7  0084               	movwf	4
  1861  04E8  1383               	bcf	3,7	;select IRP bank1
  1862  04E9  0800               	movf	0,w
  1863  04EA  00C3               	movwf	check_value_range@value
  1864  04EB  0A84               	incf	4,f
  1865  04EC  0800               	movf	0,w
  1866  04ED  00C4               	movwf	check_value_range@value+1
  1867                           
  1868                           ;main.c: 211: if (value > 5000 ) {
  1869  04EE  3013               	movlw	19
  1870  04EF  0244               	subwf	check_value_range@value+1,w
  1871  04F0  3089               	movlw	137
  1872  04F1  1903               	skipnz
  1873  04F2  0243               	subwf	check_value_range@value,w
  1874  04F3  1C03               	skipc
  1875  04F4  2CFE               	goto	l1798
  1876                           
  1877                           ;main.c: 212: tuning[key] = 0;
  1878  04F5  0845               	movf	check_value_range@key,w
  1879  04F6  00C0               	movwf	??_check_value_range
  1880  04F7  0740               	addwf	??_check_value_range,w
  1881  04F8  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1882  04F9  0084               	movwf	4
  1883  04FA  0180               	clrf	0
  1884  04FB  0A84               	incf	4,f
  1885  04FC  0180               	clrf	0
  1886                           
  1887                           ;main.c: 213: } else if (value > 4095) {
  1888  04FD  2D0F               	goto	l1802
  1889  04FE                     l1798:	
  1890  04FE  3010               	movlw	16
  1891  04FF  0244               	subwf	check_value_range@value+1,w
  1892  0500  3000               	movlw	0
  1893  0501  1903               	skipnz
  1894  0502  0243               	subwf	check_value_range@value,w
  1895  0503  1C03               	skipc
  1896  0504  2D0F               	goto	l1802
  1897                           
  1898                           ;main.c: 214: tuning[key] = 4095;
  1899  0505  0845               	movf	check_value_range@key,w
  1900  0506  00C0               	movwf	??_check_value_range
  1901  0507  0740               	addwf	??_check_value_range,w
  1902  0508  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1903  0509  0084               	movwf	4
  1904  050A  30FF               	movlw	255
  1905  050B  0080               	movwf	0
  1906  050C  0A84               	incf	4,f
  1907  050D  300F               	movlw	15
  1908  050E  0080               	movwf	0
  1909  050F                     l1802:	
  1910                           
  1911                           ;main.c: 215: }
  1912                           ;main.c: 216: printf("Current key: %i\t Current value: %i\n\r", key, tuning[key]);
  1913  050F  30E4               	movlw	low (STR_8| (0+32768))
  1914  0510  00B1               	movwf	printf@f
  1915  0511  3081               	movlw	high (STR_8| (0+32768))
  1916  0512  00B2               	movwf	printf@f+1
  1917  0513  0845               	movf	check_value_range@key,w
  1918  0514  00C0               	movwf	??_check_value_range
  1919  0515  01C1               	clrf	??_check_value_range+1
  1920  0516  0840               	movf	??_check_value_range,w
  1921  0517  00B3               	movwf	?_printf+2
  1922  0518  0841               	movf	??_check_value_range+1,w
  1923  0519  00B4               	movwf	?_printf+3
  1924  051A  0845               	movf	check_value_range@key,w
  1925  051B  00C2               	movwf	??_check_value_range+2
  1926  051C  0742               	addwf	??_check_value_range+2,w
  1927  051D  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  1928  051E  0084               	movwf	4
  1929  051F  0800               	movf	0,w
  1930  0520  00B5               	movwf	?_printf+4
  1931  0521  0A84               	incf	4,f
  1932  0522  0800               	movf	0,w
  1933  0523  00B6               	movwf	?_printf+5
  1934  0524  118A  2269         	fcall	_printf
  1935  0526  0008               	return
  1936  0527                     __end_of_check_value_range:	
  1937                           
  1938                           	psect	text6
  1939  0433                     __ptext6:	
  1940 ;; *************** function _resetTuning *****************
  1941 ;; Defined at:
  1942 ;;		line 230 in file "main.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;		None
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;		None
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  1    wreg      void 
  1949 ;; Registers used:
  1950 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1956 ;;      Params:         0       0       0       0
  1957 ;;      Locals:         0       0       0       0
  1958 ;;      Temps:          0       3       0       0
  1959 ;;      Totals:         0       3       0       0
  1960 ;;Total ram usage:        3 bytes
  1961 ;; Hardware stack levels used:    1
  1962 ;; Hardware stack levels required when called:    5
  1963 ;; This function calls:
  1964 ;;		___lwdiv
  1965 ;;		___wmul
  1966 ;;		_printf
  1967 ;;		_save_tuning
  1968 ;; This function is called by:
  1969 ;;		_tune
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           
  1974                           ;psect for function _resetTuning
  1975  0433                     _resetTuning:	
  1976                           
  1977                           ;main.c: 231: printf("Resetting tuning to factory defaults...\n\r");
  1978                           
  1979                           ;incstack = 0
  1980                           ; Regs used in _resetTuning: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1981  0433  3092               	movlw	low (STR_9| (0+32768))
  1982  0434  1283               	bcf	3,5	;RP0=0, select bank0
  1983  0435  1303               	bcf	3,6	;RP1=0, select bank0
  1984  0436  00B1               	movwf	printf@f
  1985  0437  3081               	movlw	high (STR_9| (0+32768))
  1986  0438  00B2               	movwf	printf@f+1
  1987  0439  118A  2269  118A   	fcall	_printf
  1988                           
  1989                           ;main.c: 232: for (current_key = 0; current_key < key_count; current_key += 1) {
  1990  043C  01F9               	clrf	_current_key
  1991  043D                     l1864:	
  1992  043D  0879               	movf	_current_key,w
  1993  043E  1283               	bcf	3,5	;RP0=0, select bank0
  1994  043F  1303               	bcf	3,6	;RP1=0, select bank0
  1995  0440  00CA               	movwf	??_resetTuning
  1996  0441  01CB               	clrf	??_resetTuning+1
  1997  0442  0878               	movf	_key_count+1,w
  1998  0443  024B               	subwf	??_resetTuning+1,w
  1999  0444  1D03               	skipz
  2000  0445  2C48               	goto	u1585
  2001  0446  0877               	movf	_key_count,w
  2002  0447  024A               	subwf	??_resetTuning,w
  2003  0448                     u1585:	
  2004  0448  1803               	btfsc	3,0
  2005  0449  2C7D               	goto	l1866
  2006                           
  2007                           ;main.c: 233: tuning[current_key] = (current_key * 1502) / (key_count-1);
  2008  044A  0877               	movf	_key_count,w
  2009  044B  3EFF               	addlw	255
  2010  044C  1283               	bcf	3,5	;RP0=0, select bank0
  2011  044D  1303               	bcf	3,6	;RP1=0, select bank0
  2012  044E  00A4               	movwf	___lwdiv@divisor
  2013  044F  0878               	movf	_key_count+1,w
  2014  0450  1803               	skipnc
  2015  0451  3E01               	addlw	1
  2016  0452  3EFF               	addlw	255
  2017  0453  00A5               	movwf	___lwdiv@divisor+1
  2018  0454  0879               	movf	_current_key,w
  2019  0455  00CA               	movwf	??_resetTuning
  2020  0456  01CB               	clrf	??_resetTuning+1
  2021  0457  084A               	movf	??_resetTuning,w
  2022  0458  00A0               	movwf	___wmul@multiplier
  2023  0459  084B               	movf	??_resetTuning+1,w
  2024  045A  00A1               	movwf	___wmul@multiplier+1
  2025  045B  30DE               	movlw	222
  2026  045C  00A2               	movwf	___wmul@multiplicand
  2027  045D  3005               	movlw	5
  2028  045E  00A3               	movwf	___wmul@multiplicand+1
  2029  045F  118A  279C  118A   	fcall	___wmul
  2030  0462  1283               	bcf	3,5	;RP0=0, select bank0
  2031  0463  1303               	bcf	3,6	;RP1=0, select bank0
  2032  0464  0821               	movf	?___wmul+1,w
  2033  0465  00A7               	movwf	___lwdiv@dividend+1
  2034  0466  0820               	movf	?___wmul,w
  2035  0467  00A6               	movwf	___lwdiv@dividend
  2036  0468  118A  2569  118A   	fcall	___lwdiv
  2037  046B  0879               	movf	_current_key,w
  2038  046C  1283               	bcf	3,5	;RP0=0, select bank0
  2039  046D  1303               	bcf	3,6	;RP1=0, select bank0
  2040  046E  00CC               	movwf	??_resetTuning+2
  2041  046F  074C               	addwf	??_resetTuning+2,w
  2042  0470  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  2043  0471  0084               	movwf	4
  2044  0472  0824               	movf	?___lwdiv,w
  2045  0473  1383               	bcf	3,7	;select IRP bank1
  2046  0474  0080               	movwf	0
  2047  0475  0A84               	incf	4,f
  2048  0476  0825               	movf	?___lwdiv+1,w
  2049  0477  0080               	movwf	0
  2050  0478  3001               	movlw	1
  2051  0479  00CA               	movwf	??_resetTuning
  2052  047A  084A               	movf	??_resetTuning,w
  2053  047B  07F9               	addwf	_current_key,f
  2054  047C  2C3D               	goto	l1864
  2055  047D                     l1866:	
  2056                           
  2057                           ;main.c: 234: }
  2058                           ;main.c: 235: save_tuning();
  2059  047D  118A  2527  118A   	fcall	_save_tuning
  2060                           
  2061                           ;main.c: 236: printf("Tuning reset to factory defaults. Better tune it again!\n\r");
  2062  0480  3058               	movlw	low (STR_10| (0+32768))
  2063  0481  1283               	bcf	3,5	;RP0=0, select bank0
  2064  0482  1303               	bcf	3,6	;RP1=0, select bank0
  2065  0483  00B1               	movwf	printf@f
  2066  0484  3081               	movlw	high (STR_10| (0+32768))
  2067  0485  00B2               	movwf	printf@f+1
  2068  0486  118A  2269  118A   	fcall	_printf
  2069                           
  2070                           ;main.c: 237: printf("We'll put you back in tuning mode so you can fix it now. \n\r");
  2071  0489  301C               	movlw	low (STR_11| (0+32768))
  2072  048A  1283               	bcf	3,5	;RP0=0, select bank0
  2073  048B  1303               	bcf	3,6	;RP1=0, select bank0
  2074  048C  00B1               	movwf	printf@f
  2075  048D  3081               	movlw	high (STR_11| (0+32768))
  2076  048E  00B2               	movwf	printf@f+1
  2077  048F  118A  2269         	fcall	_printf
  2078  0491  0008               	return
  2079  0492                     __end_of_resetTuning:	
  2080                           
  2081                           	psect	text7
  2082  0527                     __ptext7:	
  2083 ;; *************** function _save_tuning *****************
  2084 ;; Defined at:
  2085 ;;		line 184 in file "main.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;		None
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;  value           2   40[BANK0 ] unsigned int 
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  1    wreg      void 
  2092 ;; Registers used:
  2093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2094 ;; Tracked objects:
  2095 ;;		On entry : 0/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2099 ;;      Params:         0       0       0       0
  2100 ;;      Locals:         0       2       0       0
  2101 ;;      Temps:          0       2       0       0
  2102 ;;      Totals:         0       4       0       0
  2103 ;;Total ram usage:        4 bytes
  2104 ;; Hardware stack levels used:    1
  2105 ;; Hardware stack levels required when called:    4
  2106 ;; This function calls:
  2107 ;;		_printf
  2108 ;;		_write16_eeprom
  2109 ;; This function is called by:
  2110 ;;		_resetTuning
  2111 ;;		_tune
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           
  2116                           ;psect for function _save_tuning
  2117  0527                     _save_tuning:	
  2118                           
  2119                           ;main.c: 185: for (current_key = 0; current_key < key_count; current_key += 1) {
  2120                           
  2121                           ;incstack = 0
  2122                           ; Regs used in _save_tuning: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2123  0527  01F9               	clrf	_current_key
  2124  0528                     l1780:	
  2125  0528  0879               	movf	_current_key,w
  2126  0529  1283               	bcf	3,5	;RP0=0, select bank0
  2127  052A  1303               	bcf	3,6	;RP1=0, select bank0
  2128  052B  00C6               	movwf	??_save_tuning
  2129  052C  01C7               	clrf	??_save_tuning+1
  2130  052D  0878               	movf	_key_count+1,w
  2131  052E  0247               	subwf	??_save_tuning+1,w
  2132  052F  1D03               	skipz
  2133  0530  2D33               	goto	u1475
  2134  0531  0877               	movf	_key_count,w
  2135  0532  0246               	subwf	??_save_tuning,w
  2136  0533                     u1475:	
  2137  0533  1803               	btfsc	3,0
  2138  0534  0008               	return
  2139                           
  2140                           ;main.c: 186: uint16_t value = tuning[current_key];
  2141  0535  0879               	movf	_current_key,w
  2142  0536  1283               	bcf	3,5	;RP0=0, select bank0
  2143  0537  1303               	bcf	3,6	;RP1=0, select bank0
  2144  0538  00C6               	movwf	??_save_tuning
  2145  0539  0746               	addwf	??_save_tuning,w
  2146  053A  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  2147  053B  0084               	movwf	4
  2148  053C  1383               	bcf	3,7	;select IRP bank1
  2149  053D  0800               	movf	0,w
  2150  053E  00C8               	movwf	save_tuning@value
  2151  053F  0A84               	incf	4,f
  2152  0540  0800               	movf	0,w
  2153  0541  00C9               	movwf	save_tuning@value+1
  2154                           
  2155                           ;main.c: 187: printf("Writing value: %i", value);
  2156  0542  304D               	movlw	low (STR_5| (0+32768))
  2157  0543  00B1               	movwf	printf@f
  2158  0544  3082               	movlw	high (STR_5| (0+32768))
  2159  0545  00B2               	movwf	printf@f+1
  2160  0546  0849               	movf	save_tuning@value+1,w
  2161  0547  00B4               	movwf	?_printf+3
  2162  0548  0848               	movf	save_tuning@value,w
  2163  0549  00B3               	movwf	?_printf+2
  2164  054A  118A  2269  118A   	fcall	_printf
  2165                           
  2166                           ;main.c: 188: write16_eeprom(current_key*2, value);
  2167  054D  1283               	bcf	3,5	;RP0=0, select bank0
  2168  054E  1303               	bcf	3,6	;RP1=0, select bank0
  2169  054F  0849               	movf	save_tuning@value+1,w
  2170  0550  00C1               	movwf	write16_eeprom@value+1
  2171  0551  0848               	movf	save_tuning@value,w
  2172  0552  00C0               	movwf	write16_eeprom@value
  2173  0553  0879               	movf	_current_key,w
  2174  0554  00C6               	movwf	??_save_tuning
  2175  0555  0746               	addwf	??_save_tuning,w
  2176  0556  118A  25E5  118A   	fcall	_write16_eeprom
  2177                           
  2178                           ;main.c: 189: printf("Done!\n\r");
  2179  0559  305F               	movlw	low (STR_6| (0+32768))
  2180  055A  1283               	bcf	3,5	;RP0=0, select bank0
  2181  055B  1303               	bcf	3,6	;RP1=0, select bank0
  2182  055C  00B1               	movwf	printf@f
  2183  055D  3082               	movlw	high (STR_6| (0+32768))
  2184  055E  00B2               	movwf	printf@f+1
  2185  055F  118A  2269  118A   	fcall	_printf
  2186  0562  3001               	movlw	1
  2187  0563  1283               	bcf	3,5	;RP0=0, select bank0
  2188  0564  1303               	bcf	3,6	;RP1=0, select bank0
  2189  0565  00C6               	movwf	??_save_tuning
  2190  0566  0846               	movf	??_save_tuning,w
  2191  0567  07F9               	addwf	_current_key,f
  2192  0568  2D28               	goto	l1780
  2193  0569                     __end_of_save_tuning:	
  2194                           
  2195                           	psect	text8
  2196  05E5                     __ptext8:	
  2197 ;; *************** function _write16_eeprom *****************
  2198 ;; Defined at:
  2199 ;;		line 71 in file "main.c"
  2200 ;; Parameters:    Size  Location     Type
  2201 ;;  addr            1    wreg     unsigned char 
  2202 ;;  value           2   32[BANK0 ] unsigned int 
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;  addr            1   37[BANK0 ] unsigned char 
  2205 ;;  hi_byte         1   36[BANK0 ] unsigned char 
  2206 ;;  lo_byte         1   35[BANK0 ] unsigned char 
  2207 ;; Return value:  Size  Location     Type
  2208 ;;                  1    wreg      void 
  2209 ;; Registers used:
  2210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2211 ;; Tracked objects:
  2212 ;;		On entry : 0/0
  2213 ;;		On exit  : 0/0
  2214 ;;		Unchanged: 0/0
  2215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2216 ;;      Params:         0       2       0       0
  2217 ;;      Locals:         0       3       0       0
  2218 ;;      Temps:          0       1       0       0
  2219 ;;      Totals:         0       6       0       0
  2220 ;;Total ram usage:        6 bytes
  2221 ;; Hardware stack levels used:    1
  2222 ;; Hardware stack levels required when called:    3
  2223 ;; This function calls:
  2224 ;;		_eeprom_write
  2225 ;;		_printf
  2226 ;; This function is called by:
  2227 ;;		_save_tuning
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           
  2232                           ;psect for function _write16_eeprom
  2233  05E5                     _write16_eeprom:	
  2234                           
  2235                           ;incstack = 0
  2236                           ; Regs used in _write16_eeprom: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2237                           ;write16_eeprom@addr stored from wreg
  2238  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  2239  05E6  1303               	bcf	3,6	;RP1=0, select bank0
  2240  05E7  00C5               	movwf	write16_eeprom@addr
  2241                           
  2242                           ;main.c: 72: uint8_t lo_byte = value & 0xFF;
  2243  05E8  0840               	movf	write16_eeprom@value,w
  2244  05E9  00C2               	movwf	??_write16_eeprom
  2245  05EA  0842               	movf	??_write16_eeprom,w
  2246  05EB  00C3               	movwf	write16_eeprom@lo_byte
  2247                           
  2248                           ;main.c: 73: uint8_t hi_byte = value >> 8;
  2249  05EC  0841               	movf	write16_eeprom@value+1,w
  2250  05ED  00C2               	movwf	??_write16_eeprom
  2251  05EE  0842               	movf	??_write16_eeprom,w
  2252  05EF  00C4               	movwf	write16_eeprom@hi_byte
  2253                           
  2254                           ;main.c: 76: eeprom_write(addr, lo_byte);
  2255  05F0  0843               	movf	write16_eeprom@lo_byte,w
  2256  05F1  00C2               	movwf	??_write16_eeprom
  2257  05F2  0842               	movf	??_write16_eeprom,w
  2258  05F3  00F4               	movwf	eeprom_write@value
  2259  05F4  0845               	movf	write16_eeprom@addr,w
  2260  05F5  118A  272E  118A   	fcall	_eeprom_write
  2261                           
  2262                           ;main.c: 77: while(WR){
  2263  05F8  2E02               	goto	l1760
  2264  05F9                     l1758:	
  2265                           
  2266                           ;main.c: 78: printf(".");
  2267  05F9  3067               	movlw	low (STR_1| (0+32768))
  2268  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  2269  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  2270  05FC  00B1               	movwf	printf@f
  2271  05FD  3082               	movlw	high (STR_1| (0+32768))
  2272  05FE  00B2               	movwf	printf@f+1
  2273  05FF  118A  2269  118A   	fcall	_printf
  2274  0602                     l1760:	
  2275  0602  1683               	bsf	3,5	;RP0=1, select bank3
  2276  0603  1703               	bsf	3,6	;RP1=1, select bank3
  2277  0604  188C               	btfsc	12,1	;volsfr
  2278  0605  2DF9               	goto	l1758
  2279                           
  2280                           ;main.c: 79: }
  2281                           ;main.c: 80: eeprom_write(addr+1, hi_byte);
  2282  0606  1283               	bcf	3,5	;RP0=0, select bank0
  2283  0607  1303               	bcf	3,6	;RP1=0, select bank0
  2284  0608  0844               	movf	write16_eeprom@hi_byte,w
  2285  0609  00C2               	movwf	??_write16_eeprom
  2286  060A  0842               	movf	??_write16_eeprom,w
  2287  060B  00F4               	movwf	eeprom_write@value
  2288  060C  0845               	movf	write16_eeprom@addr,w
  2289  060D  3E01               	addlw	1
  2290  060E  118A  272E  118A   	fcall	_eeprom_write
  2291                           
  2292                           ;main.c: 81: while(WR){
  2293  0611  2E1B               	goto	l1766
  2294  0612                     l1764:	
  2295                           
  2296                           ;main.c: 82: printf(".");
  2297  0612  3067               	movlw	low (STR_1| (0+32768))
  2298  0613  1283               	bcf	3,5	;RP0=0, select bank0
  2299  0614  1303               	bcf	3,6	;RP1=0, select bank0
  2300  0615  00B1               	movwf	printf@f
  2301  0616  3082               	movlw	high (STR_1| (0+32768))
  2302  0617  00B2               	movwf	printf@f+1
  2303  0618  118A  2269  118A   	fcall	_printf
  2304  061B                     l1766:	
  2305  061B  1683               	bsf	3,5	;RP0=1, select bank3
  2306  061C  1703               	bsf	3,6	;RP1=1, select bank3
  2307  061D  188C               	btfsc	12,1	;volsfr
  2308  061E  2E12               	goto	l1764
  2309  061F  0008               	return
  2310  0620                     __end_of_write16_eeprom:	
  2311                           
  2312                           	psect	text9
  2313  072E                     __ptext9:	
  2314 ;; *************** function _eeprom_write *****************
  2315 ;; Defined at:
  2316 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic\eewrite.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  addr            1    wreg     unsigned char 
  2319 ;;  value           1    4[COMMON] unsigned char 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  addr            1    6[COMMON] unsigned char 
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  1    wreg      void 
  2324 ;; Registers used:
  2325 ;;		wreg, status,2, status,0
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2331 ;;      Params:         1       0       0       0
  2332 ;;      Locals:         1       0       0       0
  2333 ;;      Temps:          1       0       0       0
  2334 ;;      Totals:         3       0       0       0
  2335 ;;Total ram usage:        3 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; Hardware stack levels required when called:    1
  2338 ;; This function calls:
  2339 ;;		Nothing
  2340 ;; This function is called by:
  2341 ;;		_write16_eeprom
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           
  2346                           ;psect for function _eeprom_write
  2347  072E                     _eeprom_write:	
  2348                           
  2349                           ;incstack = 0
  2350                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  2351                           ;eeprom_write@addr stored from wreg
  2352  072E  00F6               	movwf	eeprom_write@addr
  2353  072F                     l296:	
  2354  072F  1683               	bsf	3,5	;RP0=1, select bank3
  2355  0730  1703               	bsf	3,6	;RP1=1, select bank3
  2356  0731  188C               	btfsc	12,1	;volsfr
  2357  0732  2F2F               	goto	l296
  2358  0733  0876               	movf	eeprom_write@addr,w
  2359  0734  1283               	bcf	3,5	;RP0=0, select bank2
  2360  0735  1703               	bsf	3,6	;RP1=1, select bank2
  2361  0736  008D               	movwf	13	;volatile
  2362  0737  0874               	movf	eeprom_write@value,w
  2363  0738  008C               	movwf	12	;volatile
  2364  0739  303F               	movlw	63
  2365  073A  00F5               	movwf	??_eeprom_write
  2366  073B  0875               	movf	??_eeprom_write,w
  2367  073C  1683               	bsf	3,5	;RP0=1, select bank3
  2368  073D  1703               	bsf	3,6	;RP1=1, select bank3
  2369  073E  058C               	andwf	12,f	;volsfr
  2370  073F  1283               	bcf	3,5	;RP0=0, select bank0
  2371  0740  1303               	bcf	3,6	;RP1=0, select bank0
  2372  0741  1003               	bcf	3,0	;volatile
  2373  0742  1B8B               	btfsc	11,7	;volatile
  2374  0743  1403               	bsf	3,0	;volatile
  2375  0744  138B               	bcf	11,7	;volatile
  2376  0745  1683               	bsf	3,5	;RP0=1, select bank3
  2377  0746  1703               	bsf	3,6	;RP1=1, select bank3
  2378  0747  150C               	bsf	12,2	;volsfr
  2379  0748  3055               	movlw	85
  2380  0749  008D               	movwf	13	;volsfr
  2381  074A  30AA               	movlw	170
  2382  074B  008D               	movwf	13	;volsfr
  2383  074C  148C               	bsf	12,1	;volsfr
  2384  074D  110C               	bcf	12,2	;volsfr
  2385  074E  1283               	bcf	3,5	;RP0=0, select bank0
  2386  074F  1303               	bcf	3,6	;RP1=0, select bank0
  2387  0750  1C03               	btfss	3,0	;volatile
  2388  0751  0008               	return
  2389  0752  178B               	bsf	11,7	;volatile
  2390  0753  0008               	return
  2391  0754                     __end_of_eeprom_write:	
  2392                           
  2393                           	psect	text10
  2394  079C                     __ptext10:	
  2395 ;; *************** function ___wmul *****************
  2396 ;; Defined at:
  2397 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2400 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;  product         2    4[COMMON] unsigned int 
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  2    0[BANK0 ] unsigned int 
  2405 ;; Registers used:
  2406 ;;		wreg, status,2, status,0
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2412 ;;      Params:         0       4       0       0
  2413 ;;      Locals:         2       0       0       0
  2414 ;;      Temps:          0       0       0       0
  2415 ;;      Totals:         2       4       0       0
  2416 ;;Total ram usage:        6 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    1
  2419 ;; This function calls:
  2420 ;;		Nothing
  2421 ;; This function is called by:
  2422 ;;		_resetTuning
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           
  2427                           ;psect for function ___wmul
  2428  079C                     ___wmul:	
  2429                           
  2430                           ;incstack = 0
  2431                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2432  079C  01F4               	clrf	___wmul@product
  2433  079D  01F5               	clrf	___wmul@product+1
  2434  079E                     l1806:	
  2435  079E  1283               	bcf	3,5	;RP0=0, select bank0
  2436  079F  1303               	bcf	3,6	;RP1=0, select bank0
  2437  07A0  1C20               	btfss	___wmul@multiplier,0
  2438  07A1  2FA8               	goto	l386
  2439  07A2  0822               	movf	___wmul@multiplicand,w
  2440  07A3  07F4               	addwf	___wmul@product,f
  2441  07A4  1803               	skipnc
  2442  07A5  0AF5               	incf	___wmul@product+1,f
  2443  07A6  0823               	movf	___wmul@multiplicand+1,w
  2444  07A7  07F5               	addwf	___wmul@product+1,f
  2445  07A8                     l386:	
  2446  07A8  3001               	movlw	1
  2447  07A9                     u1535:	
  2448  07A9  1003               	clrc
  2449  07AA  0DA2               	rlf	___wmul@multiplicand,f
  2450  07AB  0DA3               	rlf	___wmul@multiplicand+1,f
  2451  07AC  3EFF               	addlw	-1
  2452  07AD  1D03               	skipz
  2453  07AE  2FA9               	goto	u1535
  2454  07AF  3001               	movlw	1
  2455  07B0                     u1545:	
  2456  07B0  1003               	clrc
  2457  07B1  0CA1               	rrf	___wmul@multiplier+1,f
  2458  07B2  0CA0               	rrf	___wmul@multiplier,f
  2459  07B3  3EFF               	addlw	-1
  2460  07B4  1D03               	skipz
  2461  07B5  2FB0               	goto	u1545
  2462  07B6  0820               	movf	___wmul@multiplier,w
  2463  07B7  0421               	iorwf	___wmul@multiplier+1,w
  2464  07B8  1D03               	btfss	3,2
  2465  07B9  2F9E               	goto	l1806
  2466  07BA  0875               	movf	___wmul@product+1,w
  2467  07BB  00A1               	movwf	?___wmul+1
  2468  07BC  0874               	movf	___wmul@product,w
  2469  07BD  00A0               	movwf	?___wmul
  2470  07BE  0008               	return
  2471  07BF                     __end_of___wmul:	
  2472                           
  2473                           	psect	text11
  2474  07F6                     __ptext11:	
  2475 ;; *************** function _move_up *****************
  2476 ;; Defined at:
  2477 ;;		line 204 in file "main.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;		None
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;		None
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  1    wreg      void 
  2484 ;; Registers used:
  2485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2491 ;;      Params:         0       0       0       0
  2492 ;;      Locals:         0       0       0       0
  2493 ;;      Temps:          0       1       0       0
  2494 ;;      Totals:         0       1       0       0
  2495 ;;Total ram usage:        1 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    4
  2498 ;; This function calls:
  2499 ;;		_check_key_range
  2500 ;; This function is called by:
  2501 ;;		_tune
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           
  2506                           ;psect for function _move_up
  2507  07F6                     _move_up:	
  2508                           
  2509                           ;main.c: 205: currently_tuning += 1;
  2510                           
  2511                           ;incstack = 0
  2512                           ; Regs used in _move_up: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2513  07F6  3001               	movlw	1
  2514  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  2515  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  2516  07F9  00C4               	movwf	??_move_up
  2517  07FA  0844               	movf	??_move_up,w
  2518  07FB  07D7               	addwf	_currently_tuning,f
  2519                           
  2520                           ;main.c: 206: check_key_range();
  2521  07FC  118A  2685         	fcall	_check_key_range
  2522  07FE  0008               	return
  2523  07FF                     __end_of_move_up:	
  2524                           
  2525                           	psect	text12
  2526  004F                     __ptext12:	
  2527 ;; *************** function _move_down *****************
  2528 ;; Defined at:
  2529 ;;		line 200 in file "main.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;		None
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;		None
  2534 ;; Return value:  Size  Location     Type
  2535 ;;                  1    wreg      void 
  2536 ;; Registers used:
  2537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2538 ;; Tracked objects:
  2539 ;;		On entry : 0/0
  2540 ;;		On exit  : 0/0
  2541 ;;		Unchanged: 0/0
  2542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2543 ;;      Params:         0       0       0       0
  2544 ;;      Locals:         0       0       0       0
  2545 ;;      Temps:          0       1       0       0
  2546 ;;      Totals:         0       1       0       0
  2547 ;;Total ram usage:        1 bytes
  2548 ;; Hardware stack levels used:    1
  2549 ;; Hardware stack levels required when called:    4
  2550 ;; This function calls:
  2551 ;;		_check_key_range
  2552 ;; This function is called by:
  2553 ;;		_tune
  2554 ;; This function uses a non-reentrant model
  2555 ;;
  2556                           
  2557                           
  2558                           ;psect for function _move_down
  2559  004F                     _move_down:	
  2560                           
  2561                           ;main.c: 201: currently_tuning -= 1;
  2562                           
  2563                           ;incstack = 0
  2564                           ; Regs used in _move_down: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2565  004F  30FF               	movlw	255
  2566  0050  1283               	bcf	3,5	;RP0=0, select bank0
  2567  0051  1303               	bcf	3,6	;RP1=0, select bank0
  2568  0052  00C4               	movwf	??_move_down
  2569  0053  0844               	movf	??_move_down,w
  2570  0054  07D7               	addwf	_currently_tuning,f
  2571                           
  2572                           ;main.c: 202: check_key_range();
  2573  0055  118A  2685         	fcall	_check_key_range
  2574  0057  0008               	return
  2575  0058                     __end_of_move_down:	
  2576                           
  2577                           	psect	text13
  2578  0685                     __ptext13:	
  2579 ;; *************** function _check_key_range *****************
  2580 ;; Defined at:
  2581 ;;		line 192 in file "main.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;		None
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;		None
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      void 
  2588 ;; Registers used:
  2589 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2595 ;;      Params:         0       0       0       0
  2596 ;;      Locals:         0       0       0       0
  2597 ;;      Temps:          0       4       0       0
  2598 ;;      Totals:         0       4       0       0
  2599 ;;Total ram usage:        4 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    3
  2602 ;; This function calls:
  2603 ;;		_printf
  2604 ;; This function is called by:
  2605 ;;		_move_down
  2606 ;;		_move_up
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           
  2611                           ;psect for function _check_key_range
  2612  0685                     _check_key_range:	
  2613                           
  2614                           ;main.c: 193: if (currently_tuning < 0) {
  2615                           
  2616                           ;incstack = 0
  2617                           ; Regs used in _check_key_range: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2618  0685  1283               	bcf	3,5	;RP0=0, select bank0
  2619  0686  1303               	bcf	3,6	;RP1=0, select bank0
  2620  0687  1FD7               	btfss	_currently_tuning,7
  2621  0688  2E8B               	goto	l1786
  2622                           
  2623                           ;main.c: 194: currently_tuning = 0;
  2624  0689  01D7               	clrf	_currently_tuning
  2625                           
  2626                           ;main.c: 195: } else if (currently_tuning > key_count-1) {
  2627  068A  2EA5               	goto	l1790
  2628  068B                     l1786:	
  2629  068B  0857               	movf	_currently_tuning,w
  2630  068C  00C0               	movwf	??_check_key_range
  2631  068D  01C1               	clrf	??_check_key_range+1
  2632  068E  1BC0               	btfsc	??_check_key_range,7
  2633  068F  03C1               	decf	??_check_key_range+1,f
  2634  0690  0877               	movf	_key_count,w
  2635  0691  3EFF               	addlw	255
  2636  0692  00C2               	movwf	??_check_key_range+2
  2637  0693  0878               	movf	_key_count+1,w
  2638  0694  1803               	skipnc
  2639  0695  3E01               	addlw	1
  2640  0696  3EFF               	addlw	255
  2641  0697  00C3               	movwf	??_check_key_range+3
  2642  0698  0841               	movf	??_check_key_range+1,w
  2643  0699  0243               	subwf	??_check_key_range+3,w
  2644  069A  1D03               	skipz
  2645  069B  2E9E               	goto	u1495
  2646  069C  0840               	movf	??_check_key_range,w
  2647  069D  0242               	subwf	??_check_key_range+2,w
  2648  069E                     u1495:	
  2649  069E  1803               	skipnc
  2650  069F  2EA5               	goto	l1790
  2651                           
  2652                           ;main.c: 196: currently_tuning = key_count-1;
  2653  06A0  0877               	movf	_key_count,w
  2654  06A1  3EFF               	addlw	-1
  2655  06A2  00C0               	movwf	??_check_key_range
  2656  06A3  0840               	movf	??_check_key_range,w
  2657  06A4  00D7               	movwf	_currently_tuning
  2658  06A5                     l1790:	
  2659                           
  2660                           ;main.c: 197: }
  2661                           ;main.c: 198: printf("Current key: %i\n\r", currently_tuning);
  2662  06A5  303B               	movlw	low (STR_7| (0+32768))
  2663  06A6  00B1               	movwf	printf@f
  2664  06A7  3082               	movlw	high (STR_7| (0+32768))
  2665  06A8  00B2               	movwf	printf@f+1
  2666  06A9  0857               	movf	_currently_tuning,w
  2667  06AA  00B3               	movwf	?_printf+2
  2668  06AB  01B4               	clrf	?_printf+3
  2669  06AC  1BB3               	btfsc	?_printf+2,7
  2670  06AD  03B4               	decf	?_printf+3,f
  2671  06AE  118A  2269         	fcall	_printf
  2672  06B0  0008               	return
  2673  06B1                     __end_of_check_key_range:	
  2674                           
  2675                           	psect	text14
  2676  0269                     __ptext14:	
  2677 ;; *************** function _printf *****************
  2678 ;; Defined at:
  2679 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  f               2   17[BANK0 ] PTR const unsigned char 
  2682 ;;		 -> STR_12(40), STR_11(60), STR_10(58), STR_9(42), 
  2683 ;;		 -> STR_8(37), STR_7(18), STR_6(8), STR_5(18), 
  2684 ;;		 -> STR_4(22), STR_3(28), STR_2(2), STR_1(2), 
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;  tmpval          4    0        struct .
  2687 ;;  val             2   29[BANK0 ] unsigned int 
  2688 ;;  cp              2    0        PTR const unsigned char 
  2689 ;;  len             2    0        unsigned int 
  2690 ;;  c               1   31[BANK0 ] char 
  2691 ;;  prec            1   28[BANK0 ] char 
  2692 ;;  flag            1   27[BANK0 ] unsigned char 
  2693 ;;  ap              1   26[BANK0 ] PTR void [1]
  2694 ;;		 -> ?_printf(2), 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  2   17[BANK0 ] int 
  2697 ;; Registers used:
  2698 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2704 ;;      Params:         0       6       0       0
  2705 ;;      Locals:         0       6       0       0
  2706 ;;      Temps:          0       3       0       0
  2707 ;;      Totals:         0      15       0       0
  2708 ;;Total ram usage:       15 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    2
  2711 ;; This function calls:
  2712 ;;		___lwdiv
  2713 ;;		___lwmod
  2714 ;;		_putch
  2715 ;; This function is called by:
  2716 ;;		_write16_eeprom
  2717 ;;		_tuningCheck
  2718 ;;		_save_tuning
  2719 ;;		_check_key_range
  2720 ;;		_check_value_range
  2721 ;;		_resetTuning
  2722 ;;		_main
  2723 ;;		_print_tuning
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           
  2728                           ;psect for function _printf
  2729  0269                     _printf:	
  2730                           
  2731                           ;doprnt.c: 466: va_list ap;
  2732                           ;doprnt.c: 499: signed char c;
  2733                           ;doprnt.c: 506: signed char prec;
  2734                           ;doprnt.c: 508: unsigned char flag;
  2735                           ;doprnt.c: 523: union {
  2736                           ;doprnt.c: 524: unsigned long vd;
  2737                           ;doprnt.c: 525: double integ;
  2738                           ;doprnt.c: 526: } tmpval;
  2739                           ;doprnt.c: 528: unsigned int val;
  2740                           ;doprnt.c: 529: unsigned len;
  2741                           ;doprnt.c: 530: const char * cp;
  2742                           ;doprnt.c: 533: *ap = __va_start();
  2743                           
  2744                           ;incstack = 0
  2745                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2746  0269  3033               	movlw	(low ((?_printf| 0+2)))& (0+255)
  2747  026A  1283               	bcf	3,5	;RP0=0, select bank0
  2748  026B  1303               	bcf	3,6	;RP1=0, select bank0
  2749  026C  00B7               	movwf	??_printf
  2750  026D  0837               	movf	??_printf,w
  2751  026E  00BA               	movwf	printf@ap
  2752  026F                     l1750:	
  2753                           ;doprnt.c: 536: while(c = *f++) {
  2754                           
  2755  026F  1283               	bcf	3,5	;RP0=0, select bank0
  2756  0270  1303               	bcf	3,6	;RP1=0, select bank0
  2757  0271  0832               	movf	printf@f+1,w
  2758  0272  00B8               	movwf	??_printf+1
  2759  0273  0831               	movf	printf@f,w
  2760  0274  00B7               	movwf	??_printf
  2761  0275  0AB1               	incf	printf@f,f
  2762  0276  1903               	skipnz
  2763  0277  0AB2               	incf	printf@f+1,f
  2764  0278  0838               	movf	??_printf+1,w
  2765  0279  00FF               	movwf	127
  2766  027A  0837               	movf	??_printf,w
  2767  027B  0084               	movwf	4
  2768  027C  118A  2100  118A   	fcall	stringtab
  2769  027F  00B9               	movwf	??_printf+2
  2770  0280  0839               	movf	??_printf+2,w
  2771  0281  00BF               	movwf	printf@c
  2772  0282  083F               	movf	printf@c,w
  2773  0283  1903               	btfsc	3,2
  2774  0284  0008               	return
  2775                           
  2776                           ;doprnt.c: 538: if(c != '%')
  2777  0285  3025               	movlw	37
  2778  0286  063F               	xorwf	printf@c,w
  2779  0287  1903               	btfsc	3,2
  2780  0288  2A8E               	goto	l1710
  2781                           
  2782                           ;doprnt.c: 540: {
  2783                           ;doprnt.c: 541: (putch(c) );
  2784  0289  083F               	movf	printf@c,w
  2785  028A  118A  2060  118A   	fcall	_putch
  2786                           
  2787                           ;doprnt.c: 542: continue;
  2788  028D  2A6F               	goto	l1750
  2789  028E                     l1710:	
  2790                           
  2791                           ;doprnt.c: 543: }
  2792                           ;doprnt.c: 548: flag = 0;
  2793  028E  1283               	bcf	3,5	;RP0=0, select bank0
  2794  028F  1303               	bcf	3,6	;RP1=0, select bank0
  2795  0290  01BB               	clrf	printf@flag
  2796                           
  2797                           ;doprnt.c: 822: }
  2798                           
  2799                           ;doprnt.c: 813: continue;
  2800                           
  2801                           ;doprnt.c: 802: default:
  2802                           
  2803                           ;doprnt.c: 698: case 'i':
  2804                           ;doprnt.c: 699: break;
  2805                           
  2806                           ;doprnt.c: 697: case 'd':
  2807                           
  2808                           ;doprnt.c: 638: goto alldone;
  2809                           
  2810                           ;doprnt.c: 637: case 0:
  2811                           
  2812                           ;doprnt.c: 635: switch(c = *f++) {
  2813  0291  0832               	movf	printf@f+1,w
  2814  0292  00B8               	movwf	??_printf+1
  2815  0293  0831               	movf	printf@f,w
  2816  0294  00B7               	movwf	??_printf
  2817  0295  0AB1               	incf	printf@f,f
  2818  0296  1903               	skipnz
  2819  0297  0AB2               	incf	printf@f+1,f
  2820  0298  0838               	movf	??_printf+1,w
  2821  0299  00FF               	movwf	127
  2822  029A  0837               	movf	??_printf,w
  2823  029B  0084               	movwf	4
  2824  029C  118A  2100  118A   	fcall	stringtab
  2825  029F  00BF               	movwf	printf@c
  2826                           
  2827                           ; Switch size 1, requested type "space"
  2828                           ; Number of cases is 3, Range of values is 0 to 105
  2829                           ; switch strategies available:
  2830                           ; Name         Instructions Cycles
  2831                           ; simple_byte           10     6 (average)
  2832                           ; direct_byte          219     7 (fixed)
  2833                           ; jumptable            260     6 (fixed)
  2834                           ;	Chosen strategy is simple_byte
  2835  02A0  3A00               	xorlw	0	; case 0
  2836  02A1  1903               	skipnz
  2837  02A2  2B30               	goto	l261
  2838  02A3  3A64               	xorlw	100	; case 100
  2839  02A4  1903               	skipnz
  2840  02A5  2AAA               	goto	l1716
  2841  02A6  3A0D               	xorlw	13	; case 105
  2842  02A7  1903               	skipnz
  2843  02A8  2AAA               	goto	l1716
  2844  02A9  2A6F               	goto	l1750
  2845  02AA                     l1716:	
  2846                           
  2847                           ;doprnt.c: 1253: {
  2848                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2849  02AA  083A               	movf	printf@ap,w
  2850  02AB  0084               	movwf	4
  2851  02AC  1383               	bcf	3,7	;select IRP bank0
  2852  02AD  0800               	movf	0,w
  2853  02AE  00BD               	movwf	printf@val
  2854  02AF  0A84               	incf	4,f
  2855  02B0  0800               	movf	0,w
  2856  02B1  00BE               	movwf	printf@val+1
  2857  02B2  3002               	movlw	2
  2858  02B3  00B7               	movwf	??_printf
  2859  02B4  0837               	movf	??_printf,w
  2860  02B5  07BA               	addwf	printf@ap,f
  2861                           
  2862                           ;doprnt.c: 1261: if((int)val < 0) {
  2863  02B6  1FBE               	btfss	printf@val+1,7
  2864  02B7  2AC1               	goto	l1726
  2865                           
  2866                           ;doprnt.c: 1262: flag |= 0x03;
  2867  02B8  3003               	movlw	3
  2868  02B9  00B7               	movwf	??_printf
  2869  02BA  0837               	movf	??_printf,w
  2870  02BB  04BB               	iorwf	printf@flag,f
  2871                           
  2872                           ;doprnt.c: 1263: val = -val;
  2873  02BC  09BD               	comf	printf@val,f
  2874  02BD  09BE               	comf	printf@val+1,f
  2875  02BE  0ABD               	incf	printf@val,f
  2876  02BF  1903               	skipnz
  2877  02C0  0ABE               	incf	printf@val+1,f
  2878  02C1                     l1726:	
  2879                           
  2880                           ;doprnt.c: 1264: }
  2881                           ;doprnt.c: 1266: }
  2882                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2883  02C1  01BF               	clrf	printf@c
  2884  02C2  0ABF               	incf	printf@c,f
  2885  02C3  3005               	movlw	5
  2886  02C4  063F               	xorwf	printf@c,w
  2887  02C5  1903               	btfsc	3,2
  2888  02C6  2AE8               	goto	l1738
  2889  02C7                     l1732:	
  2890                           
  2891                           ;doprnt.c: 1306: if(val < dpowers[c])
  2892  02C7  083F               	movf	printf@c,w
  2893  02C8  00B7               	movwf	??_printf
  2894  02C9  0737               	addwf	??_printf,w
  2895  02CA  3E12               	addlw	low (_dpowers| (0+32768))
  2896  02CB  0084               	movwf	4
  2897  02CC  3081               	movlw	high (_dpowers| (0+32768))
  2898  02CD  1803               	skipnc
  2899  02CE  3E01               	addlw	1
  2900  02CF  00FF               	movwf	127
  2901  02D0  118A  2100  118A   	fcall	stringtab
  2902  02D3  00B8               	movwf	??_printf+1
  2903  02D4  118A  2100  118A   	fcall	stringtab
  2904  02D7  00B9               	movwf	??_printf+2
  2905  02D8  0839               	movf	??_printf+2,w
  2906  02D9  023E               	subwf	printf@val+1,w
  2907  02DA  1D03               	skipz
  2908  02DB  2ADE               	goto	u1405
  2909  02DC  0838               	movf	??_printf+1,w
  2910  02DD  023D               	subwf	printf@val,w
  2911  02DE                     u1405:	
  2912  02DE  1C03               	btfss	3,0
  2913  02DF  2AE8               	goto	l1738
  2914                           
  2915                           ;doprnt.c: 1307: break;
  2916  02E0  3001               	movlw	1
  2917  02E1  00B7               	movwf	??_printf
  2918  02E2  0837               	movf	??_printf,w
  2919  02E3  07BF               	addwf	printf@c,f
  2920  02E4  3005               	movlw	5
  2921  02E5  063F               	xorwf	printf@c,w
  2922  02E6  1D03               	btfss	3,2
  2923  02E7  2AC7               	goto	l1732
  2924  02E8                     l1738:	
  2925                           
  2926                           ;doprnt.c: 1422: {
  2927                           ;doprnt.c: 1438: if(flag & 0x03)
  2928  02E8  083B               	movf	printf@flag,w
  2929  02E9  3903               	andlw	3
  2930  02EA  1903               	btfsc	3,2
  2931  02EB  2AF0               	goto	l1742
  2932                           
  2933                           ;doprnt.c: 1439: (putch('-') );
  2934  02EC  302D               	movlw	45
  2935  02ED  118A  2060  118A   	fcall	_putch
  2936  02F0                     l1742:	
  2937                           
  2938                           ;doprnt.c: 1469: }
  2939                           ;doprnt.c: 1472: prec = c;
  2940  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  2941  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  2942  02F2  083F               	movf	printf@c,w
  2943  02F3  00B7               	movwf	??_printf
  2944  02F4  0837               	movf	??_printf,w
  2945  02F5  00BC               	movwf	printf@prec
  2946  02F6                     l1748:	
  2947                           ;doprnt.c: 1474: while(prec--) {
  2948                           
  2949  02F6  30FF               	movlw	255
  2950  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  2951  02F8  1303               	bcf	3,6	;RP1=0, select bank0
  2952  02F9  00B7               	movwf	??_printf
  2953  02FA  0837               	movf	??_printf,w
  2954  02FB  07BC               	addwf	printf@prec,f
  2955  02FC  0A3C               	incf	printf@prec,w
  2956  02FD  1903               	btfsc	3,2
  2957  02FE  2A6F               	goto	l1750
  2958                           
  2959                           ;doprnt.c: 1478: {
  2960                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2961  02FF  300A               	movlw	10
  2962  0300  00AB               	movwf	___lwmod@divisor
  2963  0301  3000               	movlw	0
  2964  0302  00AC               	movwf	___lwmod@divisor+1
  2965  0303  083C               	movf	printf@prec,w
  2966  0304  00B7               	movwf	??_printf
  2967  0305  0737               	addwf	??_printf,w
  2968  0306  3E12               	addlw	low (_dpowers| (0+32768))
  2969  0307  0084               	movwf	4
  2970  0308  3081               	movlw	high (_dpowers| (0+32768))
  2971  0309  1803               	skipnc
  2972  030A  3E01               	addlw	1
  2973  030B  00FF               	movwf	127
  2974  030C  118A  2100  118A   	fcall	stringtab
  2975  030F  00A4               	movwf	___lwdiv@divisor
  2976  0310  118A  2100  118A   	fcall	stringtab
  2977  0313  00A5               	movwf	___lwdiv@divisor+1
  2978  0314  083E               	movf	printf@val+1,w
  2979  0315  00A7               	movwf	___lwdiv@dividend+1
  2980  0316  083D               	movf	printf@val,w
  2981  0317  00A6               	movwf	___lwdiv@dividend
  2982  0318  118A  2569  118A   	fcall	___lwdiv
  2983  031B  1283               	bcf	3,5	;RP0=0, select bank0
  2984  031C  1303               	bcf	3,6	;RP1=0, select bank0
  2985  031D  0825               	movf	?___lwdiv+1,w
  2986  031E  00AE               	movwf	___lwmod@dividend+1
  2987  031F  0824               	movf	?___lwdiv,w
  2988  0320  00AD               	movwf	___lwmod@dividend
  2989  0321  118A  2620  118A   	fcall	___lwmod
  2990  0324  1283               	bcf	3,5	;RP0=0, select bank0
  2991  0325  1303               	bcf	3,6	;RP1=0, select bank0
  2992  0326  082B               	movf	?___lwmod,w
  2993  0327  3E30               	addlw	48
  2994  0328  00B8               	movwf	??_printf+1
  2995  0329  0838               	movf	??_printf+1,w
  2996  032A  00BF               	movwf	printf@c
  2997                           
  2998                           ;doprnt.c: 1523: }
  2999                           ;doprnt.c: 1524: (putch(c) );
  3000  032B  083F               	movf	printf@c,w
  3001  032C  118A  2060  118A   	fcall	_putch
  3002  032F  2AF6               	goto	l1748
  3003  0330                     l261:	
  3004                           ;doprnt.c: 1540: return 0;
  3005                           ;	Return value of _printf is never used
  3006                           
  3007                           ;doprnt.c: 1525: }
  3008                           ;doprnt.c: 1533: }
  3009                           ;doprnt.c: 1535: alldone:
  3010                           
  3011  0330  0008               	return
  3012  0331                     __end_of_printf:	
  3013                           
  3014                           	psect	text15
  3015  0060                     __ptext15:	
  3016 ;; *************** function _putch *****************
  3017 ;; Defined at:
  3018 ;;		line 21 in file "main.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;  data            1    wreg     unsigned char 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  data            1    4[COMMON] unsigned char 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3032 ;;      Params:         0       0       0       0
  3033 ;;      Locals:         1       0       0       0
  3034 ;;      Temps:          0       0       0       0
  3035 ;;      Totals:         1       0       0       0
  3036 ;;Total ram usage:        1 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    1
  3039 ;; This function calls:
  3040 ;;		Nothing
  3041 ;; This function is called by:
  3042 ;;		_printf
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           
  3047                           ;psect for function _putch
  3048  0060                     _putch:	
  3049                           
  3050                           ;incstack = 0
  3051                           ; Regs used in _putch: [wreg]
  3052                           ;putch@data stored from wreg
  3053  0060  00F4               	movwf	putch@data
  3054  0061                     l36:	
  3055                           ;main.c: 23: continue;
  3056                           
  3057                           ;main.c: 22: while( ! TXIF)
  3058                           
  3059  0061  1283               	bcf	3,5	;RP0=0, select bank0
  3060  0062  1303               	bcf	3,6	;RP1=0, select bank0
  3061  0063  1E0C               	btfss	12,4	;volatile
  3062  0064  2861               	goto	l36
  3063                           
  3064                           ;main.c: 24: TXREG = data;
  3065  0065  0874               	movf	putch@data,w
  3066  0066  0099               	movwf	25	;volatile
  3067  0067  0008               	return
  3068  0068                     __end_of_putch:	
  3069                           
  3070                           	psect	text16
  3071  0620                     __ptext16:	
  3072 ;; *************** function ___lwmod *****************
  3073 ;; Defined at:
  3074 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3075 ;; Parameters:    Size  Location     Type
  3076 ;;  divisor         2   11[BANK0 ] unsigned int 
  3077 ;;  dividend        2   13[BANK0 ] unsigned int 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  counter         1   16[BANK0 ] unsigned char 
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  2   11[BANK0 ] unsigned int 
  3082 ;; Registers used:
  3083 ;;		wreg, status,2, status,0
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3089 ;;      Params:         0       4       0       0
  3090 ;;      Locals:         0       1       0       0
  3091 ;;      Temps:          0       1       0       0
  3092 ;;      Totals:         0       6       0       0
  3093 ;;Total ram usage:        6 bytes
  3094 ;; Hardware stack levels used:    1
  3095 ;; Hardware stack levels required when called:    1
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_printf
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           
  3104                           ;psect for function ___lwmod
  3105  0620                     ___lwmod:	
  3106                           
  3107                           ;incstack = 0
  3108                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3109  0620  1283               	bcf	3,5	;RP0=0, select bank0
  3110  0621  1303               	bcf	3,6	;RP1=0, select bank0
  3111  0622  082B               	movf	___lwmod@divisor,w
  3112  0623  042C               	iorwf	___lwmod@divisor+1,w
  3113  0624  1903               	btfsc	3,2
  3114  0625  2E4F               	goto	l1276
  3115  0626  01B0               	clrf	___lwmod@counter
  3116  0627  0AB0               	incf	___lwmod@counter,f
  3117  0628                     l1266:	
  3118  0628  1BAC               	btfsc	___lwmod@divisor+1,7
  3119  0629  2E36               	goto	l1268
  3120  062A  3001               	movlw	1
  3121  062B                     u765:	
  3122  062B  1003               	clrc
  3123  062C  0DAB               	rlf	___lwmod@divisor,f
  3124  062D  0DAC               	rlf	___lwmod@divisor+1,f
  3125  062E  3EFF               	addlw	-1
  3126  062F  1D03               	skipz
  3127  0630  2E2B               	goto	u765
  3128  0631  3001               	movlw	1
  3129  0632  00AF               	movwf	??___lwmod
  3130  0633  082F               	movf	??___lwmod,w
  3131  0634  07B0               	addwf	___lwmod@counter,f
  3132  0635  2E28               	goto	l1266
  3133  0636                     l1268:	
  3134  0636  082C               	movf	___lwmod@divisor+1,w
  3135  0637  022E               	subwf	___lwmod@dividend+1,w
  3136  0638  1D03               	skipz
  3137  0639  2E3C               	goto	u785
  3138  063A  082B               	movf	___lwmod@divisor,w
  3139  063B  022D               	subwf	___lwmod@dividend,w
  3140  063C                     u785:	
  3141  063C  1C03               	skipc
  3142  063D  2E44               	goto	l1272
  3143  063E  082B               	movf	___lwmod@divisor,w
  3144  063F  02AD               	subwf	___lwmod@dividend,f
  3145  0640  082C               	movf	___lwmod@divisor+1,w
  3146  0641  1C03               	skipc
  3147  0642  03AE               	decf	___lwmod@dividend+1,f
  3148  0643  02AE               	subwf	___lwmod@dividend+1,f
  3149  0644                     l1272:	
  3150  0644  3001               	movlw	1
  3151  0645                     u795:	
  3152  0645  1003               	clrc
  3153  0646  0CAC               	rrf	___lwmod@divisor+1,f
  3154  0647  0CAB               	rrf	___lwmod@divisor,f
  3155  0648  3EFF               	addlw	-1
  3156  0649  1D03               	skipz
  3157  064A  2E45               	goto	u795
  3158  064B  3001               	movlw	1
  3159  064C  02B0               	subwf	___lwmod@counter,f
  3160  064D  1D03               	btfss	3,2
  3161  064E  2E36               	goto	l1268
  3162  064F                     l1276:	
  3163  064F  082E               	movf	___lwmod@dividend+1,w
  3164  0650  00AC               	movwf	?___lwmod+1
  3165  0651  082D               	movf	___lwmod@dividend,w
  3166  0652  00AB               	movwf	?___lwmod
  3167  0653  0008               	return
  3168  0654                     __end_of___lwmod:	
  3169                           
  3170                           	psect	text17
  3171  0569                     __ptext17:	
  3172 ;; *************** function ___lwdiv *****************
  3173 ;; Defined at:
  3174 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;  divisor         2    4[BANK0 ] unsigned int 
  3177 ;;  dividend        2    6[BANK0 ] unsigned int 
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;  quotient        2    9[BANK0 ] unsigned int 
  3180 ;;  counter         1    8[BANK0 ] unsigned char 
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  2    4[BANK0 ] unsigned int 
  3183 ;; Registers used:
  3184 ;;		wreg, status,2, status,0
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3190 ;;      Params:         0       4       0       0
  3191 ;;      Locals:         0       3       0       0
  3192 ;;      Temps:          1       0       0       0
  3193 ;;      Totals:         1       7       0       0
  3194 ;;Total ram usage:        8 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    1
  3197 ;; This function calls:
  3198 ;;		Nothing
  3199 ;; This function is called by:
  3200 ;;		_resetTuning
  3201 ;;		_printf
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           
  3206                           ;psect for function ___lwdiv
  3207  0569                     ___lwdiv:	
  3208                           
  3209                           ;incstack = 0
  3210                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3211  0569  1283               	bcf	3,5	;RP0=0, select bank0
  3212  056A  1303               	bcf	3,6	;RP1=0, select bank0
  3213  056B  01A9               	clrf	___lwdiv@quotient
  3214  056C  01AA               	clrf	___lwdiv@quotient+1
  3215  056D  0824               	movf	___lwdiv@divisor,w
  3216  056E  0425               	iorwf	___lwdiv@divisor+1,w
  3217  056F  1903               	btfsc	3,2
  3218  0570  2DA2               	goto	l1700
  3219  0571  01A8               	clrf	___lwdiv@counter
  3220  0572  0AA8               	incf	___lwdiv@counter,f
  3221  0573                     l1688:	
  3222  0573  1BA5               	btfsc	___lwdiv@divisor+1,7
  3223  0574  2D81               	goto	l1690
  3224  0575  3001               	movlw	1
  3225  0576                     u1315:	
  3226  0576  1003               	clrc
  3227  0577  0DA4               	rlf	___lwdiv@divisor,f
  3228  0578  0DA5               	rlf	___lwdiv@divisor+1,f
  3229  0579  3EFF               	addlw	-1
  3230  057A  1D03               	skipz
  3231  057B  2D76               	goto	u1315
  3232  057C  3001               	movlw	1
  3233  057D  00F6               	movwf	??___lwdiv
  3234  057E  0876               	movf	??___lwdiv,w
  3235  057F  07A8               	addwf	___lwdiv@counter,f
  3236  0580  2D73               	goto	l1688
  3237  0581                     l1690:	
  3238  0581  3001               	movlw	1
  3239  0582                     u1335:	
  3240  0582  1003               	clrc
  3241  0583  0DA9               	rlf	___lwdiv@quotient,f
  3242  0584  0DAA               	rlf	___lwdiv@quotient+1,f
  3243  0585  3EFF               	addlw	-1
  3244  0586  1D03               	skipz
  3245  0587  2D82               	goto	u1335
  3246  0588  0825               	movf	___lwdiv@divisor+1,w
  3247  0589  0227               	subwf	___lwdiv@dividend+1,w
  3248  058A  1D03               	skipz
  3249  058B  2D8E               	goto	u1345
  3250  058C  0824               	movf	___lwdiv@divisor,w
  3251  058D  0226               	subwf	___lwdiv@dividend,w
  3252  058E                     u1345:	
  3253  058E  1C03               	skipc
  3254  058F  2D97               	goto	l1696
  3255  0590  0824               	movf	___lwdiv@divisor,w
  3256  0591  02A6               	subwf	___lwdiv@dividend,f
  3257  0592  0825               	movf	___lwdiv@divisor+1,w
  3258  0593  1C03               	skipc
  3259  0594  03A7               	decf	___lwdiv@dividend+1,f
  3260  0595  02A7               	subwf	___lwdiv@dividend+1,f
  3261  0596  1429               	bsf	___lwdiv@quotient,0
  3262  0597                     l1696:	
  3263  0597  3001               	movlw	1
  3264  0598                     u1355:	
  3265  0598  1003               	clrc
  3266  0599  0CA5               	rrf	___lwdiv@divisor+1,f
  3267  059A  0CA4               	rrf	___lwdiv@divisor,f
  3268  059B  3EFF               	addlw	-1
  3269  059C  1D03               	skipz
  3270  059D  2D98               	goto	u1355
  3271  059E  3001               	movlw	1
  3272  059F  02A8               	subwf	___lwdiv@counter,f
  3273  05A0  1D03               	btfss	3,2
  3274  05A1  2D81               	goto	l1690
  3275  05A2                     l1700:	
  3276  05A2  082A               	movf	___lwdiv@quotient+1,w
  3277  05A3  00A5               	movwf	?___lwdiv+1
  3278  05A4  0829               	movf	___lwdiv@quotient,w
  3279  05A5  00A4               	movwf	?___lwdiv
  3280  05A6  0008               	return
  3281  05A7                     __end_of___lwdiv:	
  3282                           
  3283                           	psect	text18
  3284  0492                     __ptext18:	
  3285 ;; *************** function _play *****************
  3286 ;; Defined at:
  3287 ;;		line 279 in file "main.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;		None
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;  real_value      2   13[BANK0 ] unsigned int 
  3292 ;; Return value:  Size  Location     Type
  3293 ;;                  1    wreg      void 
  3294 ;; Registers used:
  3295 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3301 ;;      Params:         0       0       0       0
  3302 ;;      Locals:         0       2       0       0
  3303 ;;      Temps:          0       2       0       0
  3304 ;;      Totals:         0       4       0       0
  3305 ;;Total ram usage:        4 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    2
  3308 ;; This function calls:
  3309 ;;		_SPI_Write
  3310 ;;		_checkKey
  3311 ;;		_get_voltage
  3312 ;; This function is called by:
  3313 ;;		_main
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           
  3318                           ;psect for function _play
  3319  0492                     _play:	
  3320                           
  3321                           ;main.c: 280: pressed_keys = 0;
  3322                           
  3323                           ;incstack = 0
  3324                           ; Regs used in _play: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3325  0492  1283               	bcf	3,5	;RP0=0, select bank0
  3326  0493  1303               	bcf	3,6	;RP1=0, select bank0
  3327  0494  01D5               	clrf	_pressed_keys
  3328  0495  01D6               	clrf	_pressed_keys+1
  3329                           
  3330                           ;main.c: 281: last_key = 100;
  3331  0496  3064               	movlw	100
  3332  0497  00D3               	movwf	_last_key
  3333  0498  3000               	movlw	0
  3334  0499  00D4               	movwf	_last_key+1
  3335                           
  3336                           ;main.c: 282: for (current_key = 0; current_key < key_count; current_key += 1) {
  3337  049A  01F9               	clrf	_current_key
  3338  049B                     l1934:	
  3339  049B  0879               	movf	_current_key,w
  3340  049C  00AB               	movwf	??_play
  3341  049D  01AC               	clrf	??_play+1
  3342  049E  0878               	movf	_key_count+1,w
  3343  049F  022C               	subwf	??_play+1,w
  3344  04A0  1D03               	skipz
  3345  04A1  2CA4               	goto	u1715
  3346  04A2  0877               	movf	_key_count,w
  3347  04A3  022B               	subwf	??_play,w
  3348  04A4                     u1715:	
  3349  04A4  1803               	btfsc	3,0
  3350  04A5  2CC3               	goto	l1936
  3351                           
  3352                           ;main.c: 283: if (checkKey(current_key)) {
  3353  04A6  0879               	movf	_current_key,w
  3354  04A7  118A  2331  118A   	fcall	_checkKey
  3355  04AA  3A00               	xorlw	0
  3356  04AB  1903               	skipnz
  3357  04AC  2CBC               	goto	l1932
  3358                           
  3359                           ;main.c: 284: pressed_keys += 1;
  3360  04AD  3001               	movlw	1
  3361  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  3362  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  3363  04B0  07D5               	addwf	_pressed_keys,f
  3364  04B1  1803               	skipnc
  3365  04B2  0AD6               	incf	_pressed_keys+1,f
  3366  04B3  3000               	movlw	0
  3367  04B4  07D6               	addwf	_pressed_keys+1,f
  3368                           
  3369                           ;main.c: 285: last_key = current_key;
  3370  04B5  0879               	movf	_current_key,w
  3371  04B6  00AB               	movwf	??_play
  3372  04B7  01AC               	clrf	??_play+1
  3373  04B8  082B               	movf	??_play,w
  3374  04B9  00D3               	movwf	_last_key
  3375  04BA  082C               	movf	??_play+1,w
  3376  04BB  00D4               	movwf	_last_key+1
  3377  04BC                     l1932:	
  3378  04BC  3001               	movlw	1
  3379  04BD  1283               	bcf	3,5	;RP0=0, select bank0
  3380  04BE  1303               	bcf	3,6	;RP1=0, select bank0
  3381  04BF  00AB               	movwf	??_play
  3382  04C0  082B               	movf	??_play,w
  3383  04C1  07F9               	addwf	_current_key,f
  3384  04C2  2C9B               	goto	l1934
  3385  04C3                     l1936:	
  3386                           
  3387                           ;main.c: 286: }
  3388                           ;main.c: 287: }
  3389                           ;main.c: 289: if (pressed_keys > 0) {
  3390  04C3  0855               	movf	_pressed_keys,w
  3391  04C4  0456               	iorwf	_pressed_keys+1,w
  3392  04C5  1903               	btfsc	3,2
  3393  04C6  2CDE               	goto	l168
  3394                           
  3395                           ;main.c: 290: PORTCbits.RC5 = 1;
  3396  04C7  1687               	bsf	7,5	;volatile
  3397                           
  3398                           ;main.c: 292: uint16_t real_value = get_voltage(last_key);
  3399  04C8  0853               	movf	_last_key,w
  3400  04C9  00A0               	movwf	get_voltage@keyCode
  3401  04CA  0854               	movf	_last_key+1,w
  3402  04CB  00A1               	movwf	get_voltage@keyCode+1
  3403  04CC  01A2               	clrf	get_voltage@keyCode+2
  3404  04CD  01A3               	clrf	get_voltage@keyCode+3
  3405  04CE  118A  27BF  118A   	fcall	_get_voltage
  3406  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  3407  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  3408  04D3  0821               	movf	?_get_voltage+1,w
  3409  04D4  00AE               	movwf	play@real_value+1
  3410  04D5  0820               	movf	?_get_voltage,w
  3411  04D6  00AD               	movwf	play@real_value
  3412                           
  3413                           ;main.c: 294: SPI_Write(real_value);
  3414  04D7  082E               	movf	play@real_value+1,w
  3415  04D8  00F5               	movwf	SPI_Write@data+1
  3416  04D9  082D               	movf	play@real_value,w
  3417  04DA  00F4               	movwf	SPI_Write@data
  3418  04DB  118A  26B1         	fcall	_SPI_Write
  3419                           
  3420                           ;main.c: 295: } else {
  3421  04DD  0008               	return
  3422  04DE                     l168:	
  3423                           
  3424                           ;main.c: 296: PORTCbits.RC5 = 0;
  3425  04DE  1287               	bcf	7,5	;volatile
  3426  04DF  0008               	return
  3427  04E0                     __end_of_play:	
  3428                           
  3429                           	psect	text19
  3430  07BF                     __ptext19:	
  3431 ;; *************** function _get_voltage *****************
  3432 ;; Defined at:
  3433 ;;		line 142 in file "main.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;  keyCode         4    0[BANK0 ] unsigned long 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;		None
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  4    0[BANK0 ] unsigned long 
  3440 ;; Registers used:
  3441 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3447 ;;      Params:         0       4       0       0
  3448 ;;      Locals:         0       0       0       0
  3449 ;;      Temps:          0       7       0       0
  3450 ;;      Totals:         0      11       0       0
  3451 ;;Total ram usage:       11 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:    1
  3454 ;; This function calls:
  3455 ;;		Nothing
  3456 ;; This function is called by:
  3457 ;;		_play
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           
  3462                           ;psect for function _get_voltage
  3463  07BF                     _get_voltage:	
  3464                           
  3465                           ;main.c: 157: return tuning[keyCode];
  3466                           
  3467                           ;incstack = 0
  3468                           ; Regs used in _get_voltage: [wreg-fsr0h+status,2+status,0]
  3469  07BF  1283               	bcf	3,5	;RP0=0, select bank0
  3470  07C0  1303               	bcf	3,6	;RP1=0, select bank0
  3471  07C1  0820               	movf	get_voltage@keyCode,w
  3472  07C2  00A4               	movwf	??_get_voltage
  3473  07C3  0724               	addwf	??_get_voltage,w
  3474  07C4  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  3475  07C5  0084               	movwf	4
  3476  07C6  1383               	bcf	3,7	;select IRP bank1
  3477  07C7  0800               	movf	0,w
  3478  07C8  00A5               	movwf	??_get_voltage+1
  3479  07C9  0A84               	incf	4,f
  3480  07CA  0800               	movf	0,w
  3481  07CB  00A6               	movwf	??_get_voltage+2
  3482  07CC  0825               	movf	??_get_voltage+1,w
  3483  07CD  00A7               	movwf	??_get_voltage+3
  3484  07CE  0826               	movf	??_get_voltage+2,w
  3485  07CF  00A8               	movwf	??_get_voltage+4
  3486  07D0  01A9               	clrf	??_get_voltage+5
  3487  07D1  01AA               	clrf	??_get_voltage+6
  3488  07D2  082A               	movf	??_get_voltage+6,w
  3489  07D3  00A3               	movwf	?_get_voltage+3
  3490  07D4  0829               	movf	??_get_voltage+5,w
  3491  07D5  00A2               	movwf	?_get_voltage+2
  3492  07D6  0828               	movf	??_get_voltage+4,w
  3493  07D7  00A1               	movwf	?_get_voltage+1
  3494  07D8  0827               	movf	??_get_voltage+3,w
  3495  07D9  00A0               	movwf	?_get_voltage
  3496  07DA  0008               	return
  3497  07DB                     __end_of_get_voltage:	
  3498                           
  3499                           	psect	text20
  3500  0331                     __ptext20:	
  3501 ;; *************** function _checkKey *****************
  3502 ;; Defined at:
  3503 ;;		line 114 in file "main.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;  keyVal          1    wreg     unsigned char 
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;  keyVal          1    6[COMMON] unsigned char 
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  1    wreg      unsigned char 
  3510 ;; Registers used:
  3511 ;;		wreg, status,2, status,0
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3517 ;;      Params:         0       0       0       0
  3518 ;;      Locals:         1       0       0       0
  3519 ;;      Temps:          2       0       0       0
  3520 ;;      Totals:         3       0       0       0
  3521 ;;Total ram usage:        3 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; Hardware stack levels required when called:    1
  3524 ;; This function calls:
  3525 ;;		Nothing
  3526 ;; This function is called by:
  3527 ;;		_tuningCheck
  3528 ;;		_tune
  3529 ;;		_play
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           
  3534                           ;psect for function _checkKey
  3535  0331                     _checkKey:	
  3536                           
  3537                           ;incstack = 0
  3538                           ; Regs used in _checkKey: [wreg+status,2+status,0]
  3539                           ;checkKey@keyVal stored from wreg
  3540  0331  00F6               	movwf	checkKey@keyVal
  3541                           
  3542                           ;main.c: 115: keyVal = (key_count - keyVal - 1);
  3543  0332  0876               	movf	checkKey@keyVal,w
  3544  0333  3E01               	addlw	1
  3545  0334  3AFF               	xorlw	255
  3546  0335  3E01               	addlw	1
  3547  0336  0777               	addwf	_key_count,w
  3548  0337  00F4               	movwf	??_checkKey
  3549  0338  0874               	movf	??_checkKey,w
  3550  0339  00F6               	movwf	checkKey@keyVal
  3551                           
  3552                           ;main.c: 116: if (keyVal <= 15) {
  3553  033A  3010               	movlw	16
  3554  033B  0276               	subwf	checkKey@keyVal,w
  3555  033C  1803               	skipnc
  3556  033D  2B8C               	goto	l1450
  3557                           
  3558                           ;main.c: 117: PORTAbits.RA2 = (keyVal >> 0) & 1;
  3559  033E  0876               	movf	checkKey@keyVal,w
  3560  033F  3901               	andlw	1
  3561  0340  00F4               	movwf	??_checkKey
  3562  0341  0DF4               	rlf	??_checkKey,f
  3563  0342  0DF4               	rlf	??_checkKey,f
  3564  0343  1283               	bcf	3,5	;RP0=0, select bank0
  3565  0344  1303               	bcf	3,6	;RP1=0, select bank0
  3566  0345  0805               	movf	5,w	;volatile
  3567  0346  0674               	xorwf	??_checkKey,w
  3568  0347  39FB               	andlw	-5
  3569  0348  0674               	xorwf	??_checkKey,w
  3570  0349  0085               	movwf	5	;volatile
  3571                           
  3572                           ;main.c: 118: PORTCbits.RC0 = (keyVal >> 1) & 1;
  3573  034A  0876               	movf	checkKey@keyVal,w
  3574  034B  00F4               	movwf	??_checkKey
  3575  034C  3001               	movlw	1
  3576  034D                     u1075:	
  3577  034D  1003               	clrc
  3578  034E  0CF4               	rrf	??_checkKey,f
  3579  034F  3EFF               	addlw	-1
  3580  0350  1D03               	skipz
  3581  0351  2B4D               	goto	u1075
  3582  0352  3001               	movlw	1
  3583  0353  0574               	andwf	??_checkKey,w
  3584  0354  00F5               	movwf	??_checkKey+1
  3585  0355  0807               	movf	7,w	;volatile
  3586  0356  0675               	xorwf	??_checkKey+1,w
  3587  0357  39FE               	andlw	-2
  3588  0358  0675               	xorwf	??_checkKey+1,w
  3589  0359  0087               	movwf	7	;volatile
  3590                           
  3591                           ;main.c: 119: PORTCbits.RC1 = (keyVal >> 2) & 1;
  3592  035A  0876               	movf	checkKey@keyVal,w
  3593  035B  00F4               	movwf	??_checkKey
  3594  035C  3002               	movlw	2
  3595  035D                     u1085:	
  3596  035D  1003               	clrc
  3597  035E  0CF4               	rrf	??_checkKey,f
  3598  035F  3EFF               	addlw	-1
  3599  0360  1D03               	skipz
  3600  0361  2B5D               	goto	u1085
  3601  0362  0874               	movf	??_checkKey,w
  3602  0363  3901               	andlw	1
  3603  0364  00F5               	movwf	??_checkKey+1
  3604  0365  0DF5               	rlf	??_checkKey+1,f
  3605  0366  0807               	movf	7,w	;volatile
  3606  0367  0675               	xorwf	??_checkKey+1,w
  3607  0368  39FD               	andlw	-3
  3608  0369  0675               	xorwf	??_checkKey+1,w
  3609  036A  0087               	movwf	7	;volatile
  3610                           
  3611                           ;main.c: 120: PORTCbits.RC2 = (keyVal >> 3) & 1;
  3612  036B  0876               	movf	checkKey@keyVal,w
  3613  036C  00F4               	movwf	??_checkKey
  3614  036D  3003               	movlw	3
  3615  036E                     u1095:	
  3616  036E  1003               	clrc
  3617  036F  0CF4               	rrf	??_checkKey,f
  3618  0370  3EFF               	addlw	-1
  3619  0371  1D03               	skipz
  3620  0372  2B6E               	goto	u1095
  3621  0373  0874               	movf	??_checkKey,w
  3622  0374  3901               	andlw	1
  3623  0375  00F5               	movwf	??_checkKey+1
  3624  0376  0DF5               	rlf	??_checkKey+1,f
  3625  0377  0DF5               	rlf	??_checkKey+1,f
  3626  0378  0807               	movf	7,w	;volatile
  3627  0379  0675               	xorwf	??_checkKey+1,w
  3628  037A  39FB               	andlw	-5
  3629  037B  0675               	xorwf	??_checkKey+1,w
  3630  037C  0087               	movwf	7	;volatile
  3631                           
  3632                           ;main.c: 122: _delay((unsigned long)((1)*(8000000L/4000.0)));
  3633  037D  3003               	movlw	3
  3634  037E  00F5               	movwf	??_checkKey+1
  3635  037F  3097               	movlw	151
  3636  0380  00F4               	movwf	??_checkKey
  3637  0381                     u1777:	
  3638  0381  0BF4               	decfsz	??_checkKey,f
  3639  0382  2B81               	goto	u1777
  3640  0383  0BF5               	decfsz	??_checkKey+1,f
  3641  0384  2B81               	goto	u1777
  3642  0385  2B86               	nop2
  3643                           
  3644                           ;main.c: 124: if (PORTAbits.RA4 == 0) {
  3645  0386  1283               	bcf	3,5	;RP0=0, select bank0
  3646  0387  1303               	bcf	3,6	;RP1=0, select bank0
  3647  0388  1A05               	btfsc	5,4	;volatile
  3648  0389  2BC5               	goto	l1460
  3649                           
  3650                           ;main.c: 125: return 1;
  3651  038A  3001               	movlw	1
  3652  038B  0008               	return
  3653  038C                     l1450:	
  3654                           ;main.c: 126: }
  3655                           ;main.c: 127: } else {
  3656                           
  3657                           
  3658                           ;main.c: 128: PORTBbits.RB4 = (keyVal >> 0) & 1;
  3659  038C  0876               	movf	checkKey@keyVal,w
  3660  038D  3901               	andlw	1
  3661  038E  00F4               	movwf	??_checkKey
  3662  038F  0EF4               	swapf	??_checkKey,f
  3663  0390  1283               	bcf	3,5	;RP0=0, select bank0
  3664  0391  1303               	bcf	3,6	;RP1=0, select bank0
  3665  0392  0806               	movf	6,w	;volatile
  3666  0393  0674               	xorwf	??_checkKey,w
  3667  0394  39EF               	andlw	-17
  3668  0395  0674               	xorwf	??_checkKey,w
  3669  0396  0086               	movwf	6	;volatile
  3670                           
  3671                           ;main.c: 129: PORTCbits.RC3 = (keyVal >> 1) & 1;
  3672  0397  0876               	movf	checkKey@keyVal,w
  3673  0398  00F4               	movwf	??_checkKey
  3674  0399  1003               	clrc
  3675  039A  0C74               	rrf	??_checkKey,w
  3676  039B  3901               	andlw	1
  3677  039C  00F5               	movwf	??_checkKey+1
  3678  039D  0DF5               	rlf	??_checkKey+1,f
  3679  039E  0DF5               	rlf	??_checkKey+1,f
  3680  039F  0DF5               	rlf	??_checkKey+1,f
  3681  03A0  0807               	movf	7,w	;volatile
  3682  03A1  0675               	xorwf	??_checkKey+1,w
  3683  03A2  39F7               	andlw	-9
  3684  03A3  0675               	xorwf	??_checkKey+1,w
  3685  03A4  0087               	movwf	7	;volatile
  3686                           
  3687                           ;main.c: 130: PORTCbits.RC4 = (keyVal >> 2) & 1;
  3688  03A5  0876               	movf	checkKey@keyVal,w
  3689  03A6  00F4               	movwf	??_checkKey
  3690  03A7  3002               	movlw	2
  3691  03A8                     u1115:	
  3692  03A8  1003               	clrc
  3693  03A9  0CF4               	rrf	??_checkKey,f
  3694  03AA  3EFF               	addlw	-1
  3695  03AB  1D03               	skipz
  3696  03AC  2BA8               	goto	u1115
  3697  03AD  0874               	movf	??_checkKey,w
  3698  03AE  3901               	andlw	1
  3699  03AF  00F5               	movwf	??_checkKey+1
  3700  03B0  0EF5               	swapf	??_checkKey+1,f
  3701  03B1  0807               	movf	7,w	;volatile
  3702  03B2  0675               	xorwf	??_checkKey+1,w
  3703  03B3  39EF               	andlw	-17
  3704  03B4  0675               	xorwf	??_checkKey+1,w
  3705  03B5  0087               	movwf	7	;volatile
  3706                           
  3707                           ;main.c: 132: _delay((unsigned long)((1)*(8000000L/4000.0)));
  3708  03B6  3003               	movlw	3
  3709  03B7  00F5               	movwf	??_checkKey+1
  3710  03B8  3097               	movlw	151
  3711  03B9  00F4               	movwf	??_checkKey
  3712  03BA                     u1787:	
  3713  03BA  0BF4               	decfsz	??_checkKey,f
  3714  03BB  2BBA               	goto	u1787
  3715  03BC  0BF5               	decfsz	??_checkKey+1,f
  3716  03BD  2BBA               	goto	u1787
  3717  03BE  2BBF               	nop2
  3718                           
  3719                           ;main.c: 134: if (PORTAbits.RA5 == 0) {
  3720  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  3721  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  3722  03C1  1A85               	btfsc	5,5	;volatile
  3723  03C2  2BC5               	goto	l1460
  3724                           
  3725                           ;main.c: 135: return 1;
  3726  03C3  3001               	movlw	1
  3727  03C4  0008               	return
  3728  03C5                     l1460:	
  3729                           
  3730                           ;main.c: 136: }
  3731                           ;main.c: 137: }
  3732                           ;main.c: 138: return 0;
  3733  03C5  3000               	movlw	0
  3734  03C6  0008               	return
  3735  03C7                     __end_of_checkKey:	
  3736                           
  3737                           	psect	text21
  3738  06B1                     __ptext21:	
  3739 ;; *************** function _SPI_Write *****************
  3740 ;; Defined at:
  3741 ;;		line 28 in file "main.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;  data            2    4[COMMON] unsigned int 
  3744 ;; Auto vars:     Size  Location     Type
  3745 ;;  config          2    2[BANK0 ] unsigned int 
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  1    wreg      void 
  3748 ;; Registers used:
  3749 ;;		wreg, status,2, status,0
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/0
  3752 ;;		On exit  : 0/0
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3755 ;;      Params:         2       0       0       0
  3756 ;;      Locals:         0       2       0       0
  3757 ;;      Temps:          0       2       0       0
  3758 ;;      Totals:         2       4       0       0
  3759 ;;Total ram usage:        6 bytes
  3760 ;; Hardware stack levels used:    1
  3761 ;; Hardware stack levels required when called:    1
  3762 ;; This function calls:
  3763 ;;		Nothing
  3764 ;; This function is called by:
  3765 ;;		_tune
  3766 ;;		_play
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770                           
  3771                           ;psect for function _SPI_Write
  3772  06B1                     _SPI_Write:	
  3773                           
  3774                           ;main.c: 30: PORTCbits.RC6 = 0;
  3775                           
  3776                           ;incstack = 0
  3777                           ; Regs used in _SPI_Write: [wreg+status,2+status,0]
  3778  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  3779  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  3780  06B3  1307               	bcf	7,6	;volatile
  3781                           
  3782                           ;main.c: 33: uint16_t config = 0x3 << 12;
  3783  06B4  3000               	movlw	0
  3784  06B5  00A2               	movwf	SPI_Write@config
  3785  06B6  3030               	movlw	48
  3786  06B7  00A3               	movwf	SPI_Write@config+1
  3787                           
  3788                           ;main.c: 34: data = data & 0x0FFF;
  3789  06B8  30FF               	movlw	255
  3790  06B9  0574               	andwf	SPI_Write@data,w
  3791  06BA  00F4               	movwf	SPI_Write@data
  3792  06BB  300F               	movlw	15
  3793  06BC  0575               	andwf	SPI_Write@data+1,w
  3794  06BD  00F5               	movwf	SPI_Write@data+1
  3795                           
  3796                           ;main.c: 36: config = (config | data) >> 8;
  3797  06BE  0874               	movf	SPI_Write@data,w
  3798  06BF  0422               	iorwf	SPI_Write@config,w
  3799  06C0  00A0               	movwf	??_SPI_Write
  3800  06C1  0875               	movf	SPI_Write@data+1,w
  3801  06C2  0423               	iorwf	SPI_Write@config+1,w
  3802  06C3  00A1               	movwf	??_SPI_Write+1
  3803  06C4  0821               	movf	??_SPI_Write+1,w
  3804  06C5  00A0               	movwf	??_SPI_Write
  3805  06C6  01A1               	clrf	??_SPI_Write+1
  3806  06C7  0820               	movf	??_SPI_Write,w
  3807  06C8  00A2               	movwf	SPI_Write@config
  3808  06C9  0821               	movf	??_SPI_Write+1,w
  3809  06CA  00A3               	movwf	SPI_Write@config+1
  3810                           
  3811                           ;main.c: 38: SSPBUF = config;
  3812  06CB  0822               	movf	SPI_Write@config,w
  3813  06CC  0093               	movwf	19	;volatile
  3814  06CD                     l42:	
  3815                           ;main.c: 39: while( ! SSPSTATbits.BF);
  3816                           
  3817  06CD  1683               	bsf	3,5	;RP0=1, select bank1
  3818  06CE  1303               	bcf	3,6	;RP1=0, select bank1
  3819  06CF  1C14               	btfss	20,0	;volatile
  3820  06D0  2ECD               	goto	l42
  3821                           
  3822                           ;main.c: 41: SSPBUF = data;
  3823  06D1  0874               	movf	SPI_Write@data,w
  3824  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  3825  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  3826  06D4  0093               	movwf	19	;volatile
  3827  06D5                     l45:	
  3828                           ;main.c: 42: while( ! SSPSTATbits.BF);
  3829                           
  3830  06D5  1683               	bsf	3,5	;RP0=1, select bank1
  3831  06D6  1303               	bcf	3,6	;RP1=0, select bank1
  3832  06D7  1C14               	btfss	20,0	;volatile
  3833  06D8  2ED5               	goto	l45
  3834                           
  3835                           ;main.c: 45: PORTCbits.RC6 = 1;
  3836  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  3837  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  3838  06DB  1707               	bsf	7,6	;volatile
  3839  06DC  0008               	return
  3840  06DD                     __end_of_SPI_Write:	
  3841                           
  3842                           	psect	text22
  3843  0706                     __ptext22:	
  3844 ;; *************** function _load_tuning *****************
  3845 ;; Defined at:
  3846 ;;		line 174 in file "main.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;		None
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;		None
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  1    wreg      void 
  3853 ;; Registers used:
  3854 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3860 ;;      Params:         0       0       0       0
  3861 ;;      Locals:         0       0       0       0
  3862 ;;      Temps:          0       2       0       0
  3863 ;;      Totals:         0       2       0       0
  3864 ;;Total ram usage:        2 bytes
  3865 ;; Hardware stack levels used:    1
  3866 ;; Hardware stack levels required when called:    3
  3867 ;; This function calls:
  3868 ;;		_read16_eeprom
  3869 ;; This function is called by:
  3870 ;;		_main
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           
  3875                           ;psect for function _load_tuning
  3876  0706                     _load_tuning:	
  3877                           
  3878                           ;main.c: 175: for (current_key = 0; current_key < key_count; current_key += 1) {
  3879                           
  3880                           ;incstack = 0
  3881                           ; Regs used in _load_tuning: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3882  0706  01F9               	clrf	_current_key
  3883  0707                     l1882:	
  3884  0707  0879               	movf	_current_key,w
  3885  0708  1283               	bcf	3,5	;RP0=0, select bank0
  3886  0709  1303               	bcf	3,6	;RP1=0, select bank0
  3887  070A  00AB               	movwf	??_load_tuning
  3888  070B  01AC               	clrf	??_load_tuning+1
  3889  070C  0878               	movf	_key_count+1,w
  3890  070D  022C               	subwf	??_load_tuning+1,w
  3891  070E  1D03               	skipz
  3892  070F  2F12               	goto	u1615
  3893  0710  0877               	movf	_key_count,w
  3894  0711  022B               	subwf	??_load_tuning,w
  3895  0712                     u1615:	
  3896  0712  1803               	btfsc	3,0
  3897  0713  0008               	return
  3898                           
  3899                           ;main.c: 176: tuning[current_key] = read16_eeprom(current_key*2);
  3900  0714  0879               	movf	_current_key,w
  3901  0715  1283               	bcf	3,5	;RP0=0, select bank0
  3902  0716  1303               	bcf	3,6	;RP1=0, select bank0
  3903  0717  00AB               	movwf	??_load_tuning
  3904  0718  072B               	addwf	??_load_tuning,w
  3905  0719  118A  26DD  118A   	fcall	_read16_eeprom
  3906  071C  0879               	movf	_current_key,w
  3907  071D  1283               	bcf	3,5	;RP0=0, select bank0
  3908  071E  1303               	bcf	3,6	;RP1=0, select bank0
  3909  071F  00AC               	movwf	??_load_tuning+1
  3910  0720  072C               	addwf	??_load_tuning+1,w
  3911  0721  3EA0               	addlw	(low (_tuning| 0))& (0+255)
  3912  0722  0084               	movwf	4
  3913  0723  0820               	movf	?_read16_eeprom,w
  3914  0724  1383               	bcf	3,7	;select IRP bank1
  3915  0725  0080               	movwf	0
  3916  0726  0A84               	incf	4,f
  3917  0727  0821               	movf	?_read16_eeprom+1,w
  3918  0728  0080               	movwf	0
  3919  0729  3001               	movlw	1
  3920  072A  00AB               	movwf	??_load_tuning
  3921  072B  082B               	movf	??_load_tuning,w
  3922  072C  07F9               	addwf	_current_key,f
  3923  072D  2F07               	goto	l1882
  3924  072E                     __end_of_load_tuning:	
  3925                           
  3926                           	psect	text23
  3927  06DD                     __ptext23:	
  3928 ;; *************** function _read16_eeprom *****************
  3929 ;; Defined at:
  3930 ;;		line 85 in file "main.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;  addr            1    wreg     unsigned char 
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  addr            1   10[BANK0 ] unsigned char 
  3935 ;;  toRet           2    6[BANK0 ] unsigned int 
  3936 ;;  hi_byte         1    9[BANK0 ] unsigned char 
  3937 ;;  lo_byte         1    8[BANK0 ] unsigned char 
  3938 ;; Return value:  Size  Location     Type
  3939 ;;                  2    0[BANK0 ] unsigned int 
  3940 ;; Registers used:
  3941 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3947 ;;      Params:         0       2       0       0
  3948 ;;      Locals:         0       5       0       0
  3949 ;;      Temps:          0       4       0       0
  3950 ;;      Totals:         0      11       0       0
  3951 ;;Total ram usage:       11 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    2
  3954 ;; This function calls:
  3955 ;;		_eeprom_read
  3956 ;; This function is called by:
  3957 ;;		_load_tuning
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           
  3962                           ;psect for function _read16_eeprom
  3963  06DD                     _read16_eeprom:	
  3964                           
  3965                           ;incstack = 0
  3966                           ; Regs used in _read16_eeprom: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3967                           ;read16_eeprom@addr stored from wreg
  3968  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  3969  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  3970  06DF  00AA               	movwf	read16_eeprom@addr
  3971                           
  3972                           ;main.c: 86: uint8_t lo_byte = eeprom_read(addr);
  3973  06E0  082A               	movf	read16_eeprom@addr,w
  3974  06E1  118A  27DB  118A   	fcall	_eeprom_read
  3975  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  3976  06E5  1303               	bcf	3,6	;RP1=0, select bank0
  3977  06E6  00A2               	movwf	??_read16_eeprom
  3978  06E7  0822               	movf	??_read16_eeprom,w
  3979  06E8  00A8               	movwf	read16_eeprom@lo_byte
  3980                           
  3981                           ;main.c: 87: uint8_t hi_byte = eeprom_read(addr+1);
  3982  06E9  082A               	movf	read16_eeprom@addr,w
  3983  06EA  3E01               	addlw	1
  3984  06EB  118A  27DB         	fcall	_eeprom_read
  3985  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  3986  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  3987  06EF  00A2               	movwf	??_read16_eeprom
  3988  06F0  0822               	movf	??_read16_eeprom,w
  3989  06F1  00A9               	movwf	read16_eeprom@hi_byte
  3990                           
  3991                           ;main.c: 88: uint16_t toRet = (hi_byte << 8 | lo_byte);
  3992  06F2  0828               	movf	read16_eeprom@lo_byte,w
  3993  06F3  00A2               	movwf	??_read16_eeprom
  3994  06F4  01A3               	clrf	??_read16_eeprom+1
  3995  06F5  0829               	movf	read16_eeprom@hi_byte,w
  3996  06F6  00A4               	movwf	??_read16_eeprom+2
  3997  06F7  01A5               	clrf	??_read16_eeprom+3
  3998  06F8  0824               	movf	??_read16_eeprom+2,w
  3999  06F9  00A5               	movwf	??_read16_eeprom+3
  4000  06FA  01A4               	clrf	??_read16_eeprom+2
  4001  06FB  0822               	movf	??_read16_eeprom,w
  4002  06FC  0424               	iorwf	??_read16_eeprom+2,w
  4003  06FD  00A6               	movwf	read16_eeprom@toRet
  4004  06FE  0823               	movf	??_read16_eeprom+1,w
  4005  06FF  0425               	iorwf	??_read16_eeprom+3,w
  4006  0700  00A7               	movwf	read16_eeprom@toRet+1
  4007                           
  4008                           ;main.c: 91: return toRet;
  4009  0701  0827               	movf	read16_eeprom@toRet+1,w
  4010  0702  00A1               	movwf	?_read16_eeprom+1
  4011  0703  0826               	movf	read16_eeprom@toRet,w
  4012  0704  00A0               	movwf	?_read16_eeprom
  4013  0705  0008               	return
  4014  0706                     __end_of_read16_eeprom:	
  4015                           
  4016                           	psect	text24
  4017  07DB                     __ptext24:	
  4018 ;; *************** function _eeprom_read *****************
  4019 ;; Defined at:
  4020 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic\eeread.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  addr            1    wreg     unsigned char 
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;  addr            1    5[COMMON] unsigned char 
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  1    wreg      unsigned char 
  4027 ;; Registers used:
  4028 ;;		wreg, status,2, status,0
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4034 ;;      Params:         0       0       0       0
  4035 ;;      Locals:         1       0       0       0
  4036 ;;      Temps:          1       0       0       0
  4037 ;;      Totals:         2       0       0       0
  4038 ;;Total ram usage:        2 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    1
  4041 ;; This function calls:
  4042 ;;		Nothing
  4043 ;; This function is called by:
  4044 ;;		_read16_eeprom
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           
  4049                           ;psect for function _eeprom_read
  4050  07DB                     _eeprom_read:	
  4051                           
  4052                           ;incstack = 0
  4053                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4054                           ;eeprom_read@addr stored from wreg
  4055  07DB  00F5               	movwf	eeprom_read@addr
  4056  07DC                     l274:	
  4057  07DC  0064               	clrwdt	;# 
  4058  07DD  1683               	bsf	3,5	;RP0=1, select bank3
  4059  07DE  1703               	bsf	3,6	;RP1=1, select bank3
  4060  07DF  188C               	btfsc	12,1	;volsfr
  4061  07E0  2FDC               	goto	l274
  4062  07E1  0875               	movf	eeprom_read@addr,w
  4063  07E2  1283               	bcf	3,5	;RP0=0, select bank2
  4064  07E3  1703               	bsf	3,6	;RP1=1, select bank2
  4065  07E4  008D               	movwf	13	;volatile
  4066  07E5  303F               	movlw	63
  4067  07E6  00F4               	movwf	??_eeprom_read
  4068  07E7  0874               	movf	??_eeprom_read,w
  4069  07E8  1683               	bsf	3,5	;RP0=1, select bank3
  4070  07E9  1703               	bsf	3,6	;RP1=1, select bank3
  4071  07EA  058C               	andwf	12,f	;volsfr
  4072  07EB  140C               	bsf	12,0	;volsfr
  4073  07EC  1003               	clrc
  4074  07ED  180C               	btfsc	12,0	;volsfr
  4075  07EE  1403               	setc
  4076  07EF  3000               	movlw	0
  4077  07F0  1803               	skipnc
  4078  07F1  3001               	movlw	1
  4079  07F2  1283               	bcf	3,5	;RP0=0, select bank2
  4080  07F3  1703               	bsf	3,6	;RP1=1, select bank2
  4081  07F4  080C               	movf	12,w	;volatile
  4082  07F5  0008               	return
  4083  07F6                     __end_of_eeprom_read:	
  4084                           
  4085                           	psect	text25
  4086  05A7                     __ptext25:	
  4087 ;; *************** function _InitApp *****************
  4088 ;; Defined at:
  4089 ;;		line 22 in file "user.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;		None
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;		None
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  1    wreg      void 
  4096 ;; Registers used:
  4097 ;;		wreg, status,2, status,0
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4103 ;;      Params:         0       0       0       0
  4104 ;;      Locals:         0       0       0       0
  4105 ;;      Temps:          0       0       0       0
  4106 ;;      Totals:         0       0       0       0
  4107 ;;Total ram usage:        0 bytes
  4108 ;; Hardware stack levels used:    1
  4109 ;; Hardware stack levels required when called:    1
  4110 ;; This function calls:
  4111 ;;		Nothing
  4112 ;; This function is called by:
  4113 ;;		_main
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           
  4118                           ;psect for function _InitApp
  4119  05A7                     _InitApp:	
  4120                           
  4121                           ;user.c: 24: OSCCON = 0x70;
  4122                           
  4123                           ;incstack = 0
  4124                           ; Regs used in _InitApp: [wreg+status,2+status,0]
  4125  05A7  3070               	movlw	112
  4126  05A8  1683               	bsf	3,5	;RP0=1, select bank1
  4127  05A9  1303               	bcf	3,6	;RP1=0, select bank1
  4128  05AA  008F               	movwf	15	;volatile
  4129                           
  4130                           ;user.c: 27: ANSEL = 0;
  4131  05AB  1283               	bcf	3,5	;RP0=0, select bank2
  4132  05AC  1703               	bsf	3,6	;RP1=1, select bank2
  4133  05AD  019E               	clrf	30	;volatile
  4134                           
  4135                           ;user.c: 28: ANSELH = 0;
  4136  05AE  019F               	clrf	31	;volatile
  4137                           
  4138                           ;user.c: 31: TRISA = 0;
  4139  05AF  1683               	bsf	3,5	;RP0=1, select bank1
  4140  05B0  1303               	bcf	3,6	;RP1=0, select bank1
  4141  05B1  0185               	clrf	5	;volatile
  4142                           
  4143                           ;user.c: 32: TRISB = 0;
  4144  05B2  0186               	clrf	6	;volatile
  4145                           
  4146                           ;user.c: 33: TRISC = 0;
  4147  05B3  0187               	clrf	7	;volatile
  4148                           
  4149                           ;user.c: 39: TRISBbits.TRISB5 = 1;
  4150  05B4  1686               	bsf	6,5	;volatile
  4151                           
  4152                           ;user.c: 40: TRISBbits.TRISB7 = 1;
  4153  05B5  1786               	bsf	6,7	;volatile
  4154                           
  4155                           ;user.c: 42: BAUDCTLbits.BRG16 = 0;
  4156  05B6  119B               	bcf	27,3	;volatile
  4157                           
  4158                           ;user.c: 44: SPBRG = 51;
  4159  05B7  3033               	movlw	51
  4160  05B8  0099               	movwf	25	;volatile
  4161                           
  4162                           ;user.c: 47: BRGH = 1;
  4163  05B9  1518               	bsf	24,2	;volatile
  4164                           
  4165                           ;user.c: 48: SYNC = 0;
  4166  05BA  1218               	bcf	24,4	;volatile
  4167                           
  4168                           ;user.c: 49: SPEN = 1;
  4169  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  4170  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  4171  05BD  1798               	bsf	24,7	;volatile
  4172                           
  4173                           ;user.c: 50: CREN = 0;
  4174  05BE  1218               	bcf	24,4	;volatile
  4175                           
  4176                           ;user.c: 51: TXEN = 1;
  4177  05BF  1683               	bsf	3,5	;RP0=1, select bank1
  4178  05C0  1303               	bcf	3,6	;RP1=0, select bank1
  4179  05C1  1698               	bsf	24,5	;volatile
  4180                           
  4181                           ;user.c: 60: TRISCbits.TRISC7 = 0;
  4182  05C2  1387               	bcf	7,7	;volatile
  4183                           
  4184                           ;user.c: 61: TRISBbits.TRISB4 = 1;
  4185  05C3  1606               	bsf	6,4	;volatile
  4186                           
  4187                           ;user.c: 62: TRISBbits.TRISB6 = 0;
  4188  05C4  1306               	bcf	6,6	;volatile
  4189                           
  4190                           ;user.c: 63: TRISCbits.TRISC6 = 0;
  4191  05C5  1307               	bcf	7,6	;volatile
  4192                           
  4193                           ;user.c: 64: PORTCbits.RC6 = 1;
  4194  05C6  1283               	bcf	3,5	;RP0=0, select bank0
  4195  05C7  1303               	bcf	3,6	;RP1=0, select bank0
  4196  05C8  1707               	bsf	7,6	;volatile
  4197                           
  4198                           ;user.c: 66: SSPCONbits.SSPEN = 0;
  4199  05C9  1294               	bcf	20,5	;volatile
  4200                           
  4201                           ;user.c: 67: SSPCONbits.SSPM = 0b0000;
  4202  05CA  30F0               	movlw	-16
  4203  05CB  0594               	andwf	20,f	;volatile
  4204                           
  4205                           ;user.c: 68: SSPSTATbits.SMP = 1;
  4206  05CC  1683               	bsf	3,5	;RP0=1, select bank1
  4207  05CD  1303               	bcf	3,6	;RP1=0, select bank1
  4208  05CE  1794               	bsf	20,7	;volatile
  4209                           
  4210                           ;user.c: 69: SSPSTATbits.CKE = 1;
  4211  05CF  1714               	bsf	20,6	;volatile
  4212                           
  4213                           ;user.c: 70: SSPCONbits.CKP = 0;
  4214  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  4215  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  4216  05D2  1214               	bcf	20,4	;volatile
  4217                           
  4218                           ;user.c: 72: SSPCONbits.SSPEN = 1;
  4219  05D3  1694               	bsf	20,5	;volatile
  4220                           
  4221                           ;user.c: 77: TRISCbits.TRISC5 = 0;
  4222  05D4  1683               	bsf	3,5	;RP0=1, select bank1
  4223  05D5  1303               	bcf	3,6	;RP1=0, select bank1
  4224  05D6  1287               	bcf	7,5	;volatile
  4225                           
  4226                           ;user.c: 80: TRISAbits.TRISA4 = 1;
  4227  05D7  1605               	bsf	5,4	;volatile
  4228                           
  4229                           ;user.c: 81: nRABPU = 0;
  4230  05D8  1381               	bcf	1,7	;volatile
  4231                           
  4232                           ;user.c: 82: WPUAbits.WPUA4 = 1;
  4233  05D9  1615               	bsf	21,4	;volatile
  4234                           
  4235                           ;user.c: 83: TRISAbits.TRISA2 = 0;
  4236  05DA  1105               	bcf	5,2	;volatile
  4237                           
  4238                           ;user.c: 84: TRISCbits.TRISC0 = 0;
  4239  05DB  1007               	bcf	7,0	;volatile
  4240                           
  4241                           ;user.c: 85: TRISCbits.TRISC1 = 0;
  4242  05DC  1087               	bcf	7,1	;volatile
  4243                           
  4244                           ;user.c: 86: TRISCbits.TRISC2 = 0;
  4245  05DD  1107               	bcf	7,2	;volatile
  4246                           
  4247                           ;user.c: 89: TRISAbits.TRISA5 = 1;
  4248  05DE  1685               	bsf	5,5	;volatile
  4249                           
  4250                           ;user.c: 90: nRABPU = 0;
  4251  05DF  1381               	bcf	1,7	;volatile
  4252                           
  4253                           ;user.c: 91: WPUAbits.WPUA5 = 1;
  4254  05E0  1695               	bsf	21,5	;volatile
  4255                           
  4256                           ;user.c: 92: TRISBbits.TRISB4 = 0;
  4257  05E1  1206               	bcf	6,4	;volatile
  4258                           
  4259                           ;user.c: 93: TRISCbits.TRISC3 = 0;
  4260  05E2  1187               	bcf	7,3	;volatile
  4261                           
  4262                           ;user.c: 94: TRISCbits.TRISC4 = 0;
  4263  05E3  1207               	bcf	7,4	;volatile
  4264  05E4  0008               	return
  4265  05E5                     __end_of_InitApp:	
  4266                           
  4267                           	psect	text26
  4268  0068                     __ptext26:	
  4269 ;; *************** function _ConfigureOscillator *****************
  4270 ;; Defined at:
  4271 ;;		line 18 in file "system.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;		None
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;		None
  4276 ;; Return value:  Size  Location     Type
  4277 ;;                  1    wreg      void 
  4278 ;; Registers used:
  4279 ;;		wreg
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4285 ;;      Params:         0       0       0       0
  4286 ;;      Locals:         0       0       0       0
  4287 ;;      Temps:          0       0       0       0
  4288 ;;      Totals:         0       0       0       0
  4289 ;;Total ram usage:        0 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    1
  4292 ;; This function calls:
  4293 ;;		Nothing
  4294 ;; This function is called by:
  4295 ;;		_main
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           
  4300                           ;psect for function _ConfigureOscillator
  4301  0068                     _ConfigureOscillator:	
  4302                           
  4303                           ;system.c: 21: OSCCON = 0x70;
  4304                           
  4305                           ;incstack = 0
  4306                           ; Regs used in _ConfigureOscillator: [wreg]
  4307  0068  3070               	movlw	112
  4308  0069  1683               	bsf	3,5	;RP0=1, select bank1
  4309  006A  1303               	bcf	3,6	;RP1=0, select bank1
  4310  006B  008F               	movwf	15	;volatile
  4311  006C  0008               	return
  4312  006D                     __end_of_ConfigureOscillator:	
  4313                           
  4314                           	psect	text27
  4315  0044                     __ptext27:	
  4316 ;; *************** function _isr *****************
  4317 ;; Defined at:
  4318 ;;		line 23 in file "interrupts.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;		None
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;		None
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  1    wreg      void 
  4325 ;; Registers used:
  4326 ;;		None
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4332 ;;      Params:         0       0       0       0
  4333 ;;      Locals:         0       0       0       0
  4334 ;;      Temps:          4       0       0       0
  4335 ;;      Totals:         4       0       0       0
  4336 ;;Total ram usage:        4 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		Interrupt level 1
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           
  4346                           ;psect for function _isr
  4347  0044                     _isr:	
  4348  0044  0873               	movf	??_isr+3,w
  4349  0045  00FF               	movwf	127
  4350  0046  0872               	movf	??_isr+2,w
  4351  0047  008A               	movwf	10
  4352  0048  0871               	movf	??_isr+1,w
  4353  0049  0084               	movwf	4
  4354  004A  0E70               	swapf	??_isr^(0+-128),w
  4355  004B  0083               	movwf	3
  4356  004C  0EFE               	swapf	126,f
  4357  004D  0E7E               	swapf	126,w
  4358  004E  0009               	retfie
  4359  004F                     __end_of_isr:	
  4360  007E                     btemp	set	126	;btemp
  4361  007E                     wtemp0	set	126
  4362                           
  4363                           	psect	intentry
  4364  0004                     __pintentry:	
  4365                           ;incstack = 0
  4366                           ; Regs used in _isr: []
  4367                           
  4368  0004                     interrupt_function:	
  4369  007E                     saved_w	set	btemp
  4370  0004  00FE               	movwf	btemp
  4371  0005  0E03               	swapf	3,w
  4372  0006  00F0               	movwf	??_isr
  4373  0007  0804               	movf	4,w
  4374  0008  00F1               	movwf	??_isr+1
  4375  0009  080A               	movf	10,w
  4376  000A  00F2               	movwf	??_isr+2
  4377  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4378  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4379  000D  087F               	movf	btemp+1,w
  4380  000E  00F3               	movwf	??_isr+3
  4381  000F  118A  2844         	ljmp	_isr


Data Sizes:
    Strings     333
    Constant    10
    Data        2
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     51      57
    BANK1            80      0      46
    BANK2            80      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 60
		 -> STR_12(CODE[40]), STR_11(CODE[60]), STR_10(CODE[58]), STR_9(CODE[42]), 
		 -> STR_8(CODE[37]), STR_7(CODE[18]), STR_6(CODE[8]), STR_5(CODE[18]), 
		 -> STR_4(CODE[22]), STR_3(CODE[28]), STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    _tuningCheck->_checkKey
    _tune->_checkKey
    _resetTuning->___lwdiv
    _write16_eeprom->_eeprom_write
    _printf->___lwdiv
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    _play->_checkKey
    _read16_eeprom->_eeprom_read

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_tune
    _tuningCheck->_printf
    _tune->_resetTuning
    _tune_up->_check_value_range
    _tune_down->_check_value_range
    _check_value_range->_printf
    _resetTuning->_save_tuning
    _save_tuning->_write16_eeprom
    _write16_eeprom->_printf
    _move_up->_check_key_range
    _move_down->_check_key_range
    _check_key_range->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    _play->_get_voltage
    _load_tuning->_read16_eeprom

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   29901
                                             48 BANK0      3     3      0
                _ConfigureOscillator
                            _InitApp
                        _load_tuning
                               _play
                             _printf
                               _tune
                        _tuningCheck
 ---------------------------------------------------------------------------------
 (1) _tuningCheck                                          0     0      0    2544
                           _checkKey
                             _printf
 ---------------------------------------------------------------------------------
 (1) _tune                                                 3     3      0   24167
                                             45 BANK0      3     3      0
                          _SPI_Write
                           _checkKey
                          _move_down
                            _move_up
                        _resetTuning
                        _save_tuning
                          _tune_down
                            _tune_up
 ---------------------------------------------------------------------------------
 (2) _tune_up                                              6     6      0    2692
                                             38 BANK0      6     6      0
                  _check_value_range
 ---------------------------------------------------------------------------------
 (2) _tune_down                                            6     6      0    2692
                                             38 BANK0      6     6      0
                  _check_value_range
 ---------------------------------------------------------------------------------
 (3) _check_value_range                                    6     6      0    2565
                                             32 BANK0      6     6      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _resetTuning                                          3     3      0    8380
                                             42 BANK0      3     3      0
                            ___lwdiv
                             ___wmul
                             _printf
                        _save_tuning
 ---------------------------------------------------------------------------------
 (2) _save_tuning                                          4     4      0    5196
                                             38 BANK0      4     4      0
                             _printf
                     _write16_eeprom
 ---------------------------------------------------------------------------------
 (3) _write16_eeprom                                       6     4      2    2786
                                             32 BANK0      6     4      2
                       _eeprom_write
                             _printf
 ---------------------------------------------------------------------------------
 (4) _eeprom_write                                         3     2      1     172
                                              4 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _move_up                                              1     1      0    2345
                                             36 BANK0      1     1      0
                    _check_key_range
 ---------------------------------------------------------------------------------
 (2) _move_down                                            1     1      0    2345
                                             36 BANK0      1     1      0
                    _check_key_range
 ---------------------------------------------------------------------------------
 (3) _check_key_range                                      4     4      0    2345
                                             32 BANK0      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    17      6    2345
                                             17 BANK0     15     9      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                             11 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     549
                                              6 COMMON     1     1      0
                                              4 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _play                                                 4     4      0     659
                                             11 BANK0      4     4      0
                          _SPI_Write
                           _checkKey
                        _get_voltage
 ---------------------------------------------------------------------------------
 (2) _get_voltage                                         11     7      4     108
                                              0 BANK0     11     7      4
 ---------------------------------------------------------------------------------
 (2) _checkKey                                             3     3      0     199
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _SPI_Write                                            6     4      2     318
                                              4 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _load_tuning                                          2     2      0     186
                                             11 BANK0      2     2      0
                      _read16_eeprom
 ---------------------------------------------------------------------------------
 (2) _read16_eeprom                                       11     9      2     186
                                              0 BANK0     11     9      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (3) _eeprom_read                                          2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _load_tuning
     _read16_eeprom
       _eeprom_read
   _play
     _SPI_Write
     _checkKey
     _get_voltage
   _printf
     ___lwdiv
       ___wmul (ARG)
     ___lwmod
       ___lwdiv (ARG)
         ___wmul (ARG)
     _putch
   _tune
     _SPI_Write
     _checkKey
     _move_down
       _check_key_range
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           _putch
     _move_up
       _check_key_range
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           _putch
     _resetTuning
       ___lwdiv
         ___wmul (ARG)
       ___wmul
       _printf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         _putch
       _save_tuning
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           _putch
         _write16_eeprom
           _eeprom_write
           _printf
             ___lwdiv
               ___wmul (ARG)
             ___lwmod
               ___lwdiv (ARG)
                 ___wmul (ARG)
             _putch
     _save_tuning
       _printf
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
           ___lwdiv (ARG)
             ___wmul (ARG)
         _putch
       _write16_eeprom
         _eeprom_write
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           _putch
     _tune_down
       _check_value_range
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           _putch
     _tune_up
       _check_value_range
         _printf
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
           _putch
   _tuningCheck
     _checkKey
     _printf
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
       _putch

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      2E       5       57.5%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     33      39       3       71.3%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      71      10        0.0%
ABS                  0      0      71       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Jan 31 12:49:55 2018

                           pc 0002                   __CFG_CP$OFF 0000                   _SSPSTATbits 0094  
                          l42 06CD                            l36 0061                            l45 06D5  
                          _RD 0C60                            _WR 0C61                  ?_get_voltage 0020  
                          fsr 0004           ___wmul@multiplicand 0022                           l261 0330  
                         l168 04DE                           l274 07DC                           l296 072F  
                         l386 07A8                           _GIE 005F                  __CFG_CPD$OFF 0000  
               _read16_eeprom 06DD                           u765 062B                           u785 063C  
                         u795 0645                           _isr 0044                           fsr0 0004  
                         indf 0000                          l1272 0644                          l1450 038C  
                        l1266 0628                          l1460 03C5                          l1700 05A2  
                        l1268 0636                          l1276 064F                          l1710 028E  
                        l1802 050F                          l1732 02C7                          l1716 02AA  
                        l1900 03DE                          l1742 02F0                          l1726 02C1  
                        l1750 026F                          l1806 079E                          l1760 0602  
                        l1912 03F9                          l1904 03E5                          l1920 0423  
                        l1690 0581                          l1738 02E8                          l1932 04BC  
                        l1748 02F6                          l1764 0612                          l1780 0528  
                        l1908 03EF                          l1916 0400                          l1934 049B  
                        l1790 06A5                          l1766 061B                          l1758 05F9  
                        l1918 0406                          l1936 04C3                          l1696 0597  
                        l1688 0573                          l1864 043D                          l1882 0707  
                        l1786 068B                          l1866 047D                          l1962 0669  
                        l1964 0672                          l1798 04FE                          l1966 0681  
                        l1896 03D7                          ?_isr 0070                          STR_1 0267  
                        STR_2 0267                          STR_3 0209                          STR_4 0225  
                        STR_5 024D                          STR_6 025F                          STR_7 023B  
                        STR_8 01E4                          STR_9 0192                          _BRGH 04C2  
                        _CREN 00C4                          u1115 03A8                          u1075 034D  
                        u1315 0576                          u1085 035D                          u1405 02DE  
                        u1095 036E                          u1335 0582                          u1345 058E  
                        u1355 0598                          u1615 0712                          u1535 07A9  
                        u1545 07B0                          u1715 04A4                          u1475 0533  
                        u1495 069E                          u1585 0448                          u1757 067A  
                        u1695 0411                          u1767 03CF                          u1777 0381  
                        u1787 03BA                          _SPEN 00C7                          _WREN 0C62  
                        _TXEN 04C5                          _TXIF 0064                          _SYNC 04C4  
              ??_eeprom_write 0075                          _main 0654                          _play 0492  
                        btemp 007E                          _tune 03C7                          start 0011  
           read16_eeprom@addr 002A                 __CFG_IESO$OFF 0000               _check_key_range 0685  
      check_value_range@value 0043                 __CFG_MCLRE$ON 0000               __end_of_InitApp 05E5  
                 _tuningCheck 002B                         ??_isr 0070                         ?_main 0070  
              ?_read16_eeprom 0020                         _EEADR 010D                         ?_play 0070  
                       STR_10 0158                         STR_11 011C                         STR_12 01BC  
               __CFG_WDTE$OFF 0000                         _CARRY 0018                         _ANSEL 011E  
                       ?_tune 0070               __end_of___lwdiv 05A7               __end_of___lwmod 0654  
                       _SPBRG 0099                  ?_load_tuning 0070                         _TRISA 0085  
                       _TRISB 0086                         _TRISC 0087                         _TXREG 0019  
         _ConfigureOscillator 0068                 __CFG_PWRTE$ON 0000                __CFG_FCMEN$OFF 0000  
             __end_of_dpowers 011C                         _putch 0060                __CFG_BOREN$OFF 0000  
                       pclath 000A               __end_of_move_up 07FF         write16_eeprom@hi_byte 0044  
                       status 0003                         wtemp0 007E               __end_of_tune_up 0778  
          __size_of_SPI_Write 002C         write16_eeprom@lo_byte 0043            read16_eeprom@toRet 0026  
        ?_ConfigureOscillator 0070               __initialization 0013                  __end_of_main 0685  
                __end_of_play 04E0                  __end_of_tune 0433                        ??_main 0050  
                      ??_play 002B                        ??_tune 004D                        _EEDATA 010C  
                      _EECON1 018C                        _EECON2 018D                        ?_putch 0070  
                      _ANSELH 011F       __end_of_check_key_range 06B1                        _OSCCON 008F  
                ?_save_tuning 0070                        _SSPBUF 0013              __end_of_checkKey 03C7  
                   ??_InitApp 0074         ??_ConfigureOscillator 0074                  ?_resetTuning 0070  
                      _nRABPU 040F          __size_of_eeprom_read 001B                        ___wmul 079C  
                   ??___lwdiv 0076                     ??___lwmod 002F               ??_read16_eeprom 0022  
        __end_of_eeprom_write 0754                        _printf 0269                        _tuning 00A0  
        __size_of_get_voltage 001C             __end_of_SPI_Write 06DD                  __pdataCOMMON 0077  
                      saved_w 007E                     ??_move_up 0044                     ??_tune_up 0046  
     __end_of__initialization 0028               eeprom_read@addr 0075                __pcstackCOMMON 0070  
     __size_of_write16_eeprom 003B                 __end_of_putch 0068           write16_eeprom@value 0040  
           eeprom_write@value 0074          __size_of_load_tuning 0028                       ??_putch 0074  
                  __pbssBANK0 0053                    __pbssBANK1 00A0              ?_check_key_range 0070  
                  __pmaintext 0654                  ?_tuningCheck 0070                       ?___wmul 0020  
                  __pintentry 0004            __size_of_move_down 0009                       ?_printf 0031  
                   ?_checkKey 0070                    __stringtab 0100                  tune_down@key 004B  
          __size_of_tune_down 0024             _check_value_range 04E0                       _InitApp 05A7  
                tune_up@value 0049          __size_of_save_tuning 0042            ?_check_value_range 0070  
              checkKey@keyVal 0076                 SPI_Write@data 0074          __size_of_resetTuning 005F  
       __size_of_eeprom_write 0026               __size_of___wmul 0023                       ___lwdiv 0569  
                     ___lwmod 0620           ??_check_value_range 0040                       __ptext1 002B  
                     __ptext2 03C7                       __ptext3 0754                       __ptext4 0778  
                     __ptext5 04E0                       __ptext6 0433                       __ptext7 0527  
                     __ptext8 05E5                       __ptext9 072E               __size_of_printf 00C8  
                     _dpowers 0112                    ??_checkKey 0074                  __size_of_isr 000B  
                     _move_up 07F6                       clrloop0 0059                       _tune_up 0754  
        end_of_initialization 0028     __end_of_check_value_range 0527             __end_of_move_down 0058  
                _eeprom_write 072E                _write16_eeprom 05E5                       printf@c 003F  
                     printf@f 0031                  __pstringtext 0100                _in_tuning_mode 0058  
                   _PORTAbits 0005                     _PORTBbits 0006                     _PORTCbits 0007  
           __end_of_tune_down 079C          read16_eeprom@hi_byte 0029                     _TRISAbits 0085  
                   _TRISBbits 0086                     _TRISCbits 0087          read16_eeprom@lo_byte 0028  
                   _SPI_Write 06B1   __end_of_ConfigureOscillator 006D                tune_down@value 0049  
               ??_eeprom_read 0074        __end_of_write16_eeprom 0620                play@real_value 002D  
               ??_get_voltage 0024                __end_of___wmul 07BF                 __pidataCOMMON 006D  
        __size_of_tuningCheck 0019                   _BAUDCTLbits 009B         __end_of_read16_eeprom 0706  
              __end_of_printf 0331           start_initialization 0013                   __end_of_isr 004F  
                  ?_SPI_Write 0074    __size_of_check_value_range 0047              _currently_tuning 0057  
             SPI_Write@config 0022               ?_write16_eeprom 0040                      ??___wmul 0074  
         __end_of_eeprom_read 07F6                      ??_printf 0037                 ??_load_tuning 002B  
                 __pbssCOMMON 0079           __end_of_get_voltage 07DB                     ___latbits 0001  
               __pcstackBANK0 0020             __size_of_checkKey 0096            write16_eeprom@addr 0045  
            eeprom_write@addr 0076                      ?_InitApp 0070              ___lwdiv@dividend 0026  
    __size_of_check_key_range 002C                      ?___lwdiv 0024                      ?___lwmod 002B  
                    ?_move_up 0070                   ??_SPI_Write 0020                     _key_count 0077  
            ___lwdiv@quotient 0029                      ?_tune_up 0070           __end_of_load_tuning 072E  
              __size_of_putch 0008                 ??_save_tuning 0046             interrupt_function 0004  
              ___wmul@product 0074                     clear_ram0 0058                   _eeprom_read 07DB  
               ??_resetTuning 004A                     _move_down 004F                   _get_voltage 07BF  
                 __stringbase 0112             ___wmul@multiplier 0020                    printf@flag 003B  
                    _WPUAbits 0095                    printf@prec 003C                     _tune_down 0778  
        check_value_range@key 0045              __size_of_InitApp 003E                    ?_move_down 0070  
         __end_of_save_tuning 0569           __end_of_resetTuning 0492              __size_of___lwdiv 003E  
            __size_of___lwmod 0034            __end_of__stringtab 0112             ??_check_key_range 0040  
                    _checkKey 0331                   _load_tuning 0706                   _current_key 0079  
                  ?_tune_down 0070               ___lwdiv@divisor 0024               ___lwdiv@counter 0028  
                    __ptext10 079C                      __ptext11 07F6                      __ptext20 0331  
                    __ptext12 004F                      __ptext21 06B1                      __ptext13 0685  
                    __ptext22 0706                      __ptext14 0269                      __ptext23 06DD  
                    __ptext15 0060                      __ptext24 07DB                      __ptext16 0620  
                    __ptext25 05A7                      __ptext17 0569                      __ptext26 0068  
                    __ptext18 0492                      __ptext27 0044                      __ptext19 07BF  
            __size_of_move_up 0009            get_voltage@keyCode 0020              __size_of_tune_up 0024  
            ??_write16_eeprom 0042                    tune_up@key 004B                      _last_key 0053  
               __size_of_main 0031                 __size_of_play 004E                 __size_of_tune 006C  
__size_of_ConfigureOscillator 0005                 ??_tuningCheck 0077                     printf@val 003D  
                   putch@data 0074                      intlevel1 0000              save_tuning@value 0048  
                 _save_tuning 0527              ___lwmod@dividend 002D        __size_of_read16_eeprom 0029  
                 _resetTuning 0433                     stringcode 010A                   ??_move_down 0044  
                    printf@ap 003A                  _pressed_keys 0055           __end_of_tuningCheck 0044  
             ___lwmod@divisor 002B               ___lwmod@counter 0030                   ??_tune_down 0046  
                    stringtab 0100                 ?_eeprom_write 0074             __CFG_FOSC$INTRCIO 0000  
                ?_eeprom_read 0070                    _SSPCONbits 0014  
